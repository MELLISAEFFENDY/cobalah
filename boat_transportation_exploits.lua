--// Boat & Transportation Exploits Module
--// Based on Remote Events Analysis from fdump.txt
--// Created: September 3, 2025

local Players = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local RunService = cloneref(game:GetService('RunService'))
local TweenService = cloneref(game:GetService('TweenService'))
local Workspace = cloneref(game:GetService('Workspace'))

local lp = Players.LocalPlayer
local BoatExploits = {}

--// Remote Events Storage (Based on fdump.txt)
BoatExploits.RemoteEvents = {
    -- Sea Traveler System
    SeaTraveler = {
        Teleport = Workspace.world.npcs["Sea Traveler"].seatraveler.teleport
    },
    
    -- Boat Management
    Boats = {
        Spawn = ReplicatedStorage.packages.Net.RF.Boats.Spawn,
        Purchase = ReplicatedStorage.packages.Net.RF.Boats.Purchase,
        Despawn = ReplicatedStorage.packages.Net.RE.Boats.Despawn,
        Open = ReplicatedStorage.packages.Net.RE.Boats.Open,
        Close = ReplicatedStorage.packages.Net.RE.Boats.Close
    },
    
    -- Boat Controls (from vessel instances)
    VesselControls = {
        RedRacer = ReplicatedStorage.resources.replicated.instances.vessels["Red Racer"].Base.RemoteEvent,
        FischmasSpeedboat = ReplicatedStorage.resources.replicated.instances.vessels["Fischmas Speedboat"].Base.RemoteEvent,
        LootRider = ReplicatedStorage.resources.replicated.instances.vessels["Loot Rider"].Base.RemoteEvent,
        CelestialCruiser = ReplicatedStorage.resources.replicated.instances.vessels["Celestial Cruiser"].Base.RemoteEvent,
        SeaPegasus = ReplicatedStorage.resources.replicated.instances.vessels["Sea Pegasus"].Base.RemoteEvent,
        GuardianOfAtlantis = ReplicatedStorage.resources.replicated.instances.vessels["Guardian of Atlantis"].Base.RemoteEvent,
        KingOfTheKraken = ReplicatedStorage.resources.replicated.instances.vessels["King of the Kraken"].Base.RemoteEvent,
        CthulhuBoat = ReplicatedStorage.resources.replicated.instances.vessels["Cthulhu Boat"].Base.RemoteEvent,
        Airboat = ReplicatedStorage.resources.replicated.instances.vessels.Airboat.WheelBase.RemoteEvent
    }
}

--// Data Storage
BoatExploits.Data = {
    AvailableBoats = {},
    OptimalSpawnLocations = {},
    CurrentBoat = nil,
    BoatStats = {},
    TravelHistory = {},
    SpeedModifiers = {},
    FuelStatus = {}
}

--// Configuration
BoatExploits.Config = {
    AutoBoatSpawner = false,
    BoatSpeedMultiplier = false,
    InfiniteBoatFuel = false,
    AutoSeaTraveler = false,
    SpeedMultiplier = 5.0,
    AutoSpawnDelay = 2,
    TravelDelay = 1,
    OptimalBoatType = "Guardian of Atlantis",
    AutoDespawnOnLeave = true,
    SmartBoatSelection = true,
    LogActivity = true
}

--// Optimal Spawn Locations
BoatExploits.SpawnLocations = {
    Moosewood = CFrame.new(472.306, 125.5, 230.045),
    RoslitBay = CFrame.new(-1518.842, 125.5, 720.308),
    ForsakenShores = CFrame.new(-2515.463, 125.5, 1565.049),
    SunstoneIsland = CFrame.new(-930.847, 125.5, -1122.463),
    StatueOfSovereignty = CFrame.new(35.892, 125.5, -1025.463),
    TerrapinIsland = CFrame.new(-186.923, 125.5, 1967.584),
    SnowcapIsland = CFrame.new(2620.847, 125.5, 2450.463),
    MushroveSwamp = CFrame.new(2448.692, 125.5, -675.847),
    AncientIsle = CFrame.new(6072.463, 125.5, 290.847),
    NorthernExpedition = CFrame.new(-1685.847, 125.5, 3960.463),
    DepthsEntrance = CFrame.new(-15.847, -680, 1235.463)
}

--// Helper Functions
local function safeFireRemote(remote, ...)
    local success, result = pcall(function()
        return remote:FireServer(...)
    end)
    if not success then
        warn("Failed to fire remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function safeInvokeRemote(remote, ...)
    local success, result = pcall(function()
        return remote:InvokeServer(...)
    end)
    if not success then
        warn("Failed to invoke remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function logActivity(activity, details)
    if not BoatExploits.Config.LogActivity then return end
    local timestamp = os.date("%H:%M:%S")
    print(string.format("[%s] BOAT: %s - %s", timestamp, activity, details or ""))
end

local function getPlayerBoat()
    local character = lp.Character
    if character then
        for _, obj in pairs(character:GetChildren()) do
            if obj:IsA("Model") and string.find(obj.Name:lower(), "boat") then
                return obj
            end
        end
    end
    
    -- Check workspace for player's boat
    for _, boat in pairs(Workspace:GetChildren()) do
        if boat:IsA("Model") and boat:GetAttribute("Owner") == lp.Name then
            return boat
        end
    end
    
    return nil
end

local function getOptimalSpawnLocation()
    local character = lp.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return BoatExploits.SpawnLocations.Moosewood
    end
    
    local playerPos = character.HumanoidRootPart.Position
    local closestLocation = nil
    local closestDistance = math.huge
    
    for locationName, cframe in pairs(BoatExploits.SpawnLocations) do
        local distance = (cframe.Position - playerPos).Magnitude
        if distance < closestDistance then
            closestDistance = distance
            closestLocation = cframe
        end
    end
    
    return closestLocation or BoatExploits.SpawnLocations.Moosewood
end

--// 1. AUTO BOAT SPAWNER
function BoatExploits:StartAutoBoatSpawner()
    if self.Config.AutoBoatSpawner then return end
    self.Config.AutoBoatSpawner = true
    logActivity("SPAWNER", "Starting Auto Boat Spawner")
    
    spawn(function()
        while self.Config.AutoBoatSpawner do
            local currentBoat = getPlayerBoat()
            if not currentBoat then
                self:SpawnOptimalBoat()
                wait(self.Config.AutoSpawnDelay)
            end
            wait(5) -- Check every 5 seconds
        end
    end)
end

function BoatExploits:StopAutoBoatSpawner()
    self.Config.AutoBoatSpawner = false
    logActivity("SPAWNER", "Stopping Auto Boat Spawner")
end

function BoatExploits:SpawnOptimalBoat()
    local boatType = self.Config.OptimalBoatType
    local spawnLocation = getOptimalSpawnLocation()
    
    logActivity("SPAWN", "Spawning " .. boatType .. " at optimal location")
    
    -- Method 1: Use Boats.Spawn remote
    if self.RemoteEvents.Boats.Spawn then
        local success = safeInvokeRemote(self.RemoteEvents.Boats.Spawn, boatType, spawnLocation)
        if success then
            logActivity("SPAWN", "Successfully spawned " .. boatType)
            self.Data.CurrentBoat = boatType
            return true
        end
    end
    
    -- Method 2: Try purchasing then spawning
    if self.RemoteEvents.Boats.Purchase then
        safeInvokeRemote(self.RemoteEvents.Boats.Purchase, boatType)
        wait(1)
        safeInvokeRemote(self.RemoteEvents.Boats.Spawn, boatType, spawnLocation)
    end
    
    return false
end

function BoatExploits:SpawnBoatAtLocation(boatType, location)
    if self.RemoteEvents.Boats.Spawn then
        local success = safeInvokeRemote(self.RemoteEvents.Boats.Spawn, boatType, location)
        if success then
            logActivity("SPAWN", "Spawned " .. boatType .. " at custom location")
            return true
        end
    end
    return false
end

--// 2. BOAT SPEED MULTIPLIER
function BoatExploits:StartBoatSpeedMultiplier()
    if self.Config.BoatSpeedMultiplier then return end
    self.Config.BoatSpeedMultiplier = true
    logActivity("SPEED", "Starting Boat Speed Multiplier (x" .. self.Config.SpeedMultiplier .. ")")
    
    spawn(function()
        while self.Config.BoatSpeedMultiplier do
            local boat = getPlayerBoat()
            if boat then
                self:ApplySpeedMultiplier(boat)
            end
            wait(0.1)
        end
    end)
end

function BoatExploits:StopBoatSpeedMultiplier()
    self.Config.BoatSpeedMultiplier = false
    logActivity("SPEED", "Stopping Boat Speed Multiplier")
    
    -- Restore original speeds
    local boat = getPlayerBoat()
    if boat then
        self:RestoreOriginalSpeed(boat)
    end
end

function BoatExploits:ApplySpeedMultiplier(boat)
    if not boat or not boat:FindFirstChild("VehicleSeat") then return end
    
    local vehicleSeat = boat:FindFirstChild("VehicleSeat")
    local bodyVelocity = vehicleSeat:FindFirstChild("BodyVelocity")
    
    -- Store original speed if not stored
    if not self.Data.SpeedModifiers[boat.Name] then
        if vehicleSeat:GetAttribute("MaxSpeed") then
            self.Data.SpeedModifiers[boat.Name] = vehicleSeat:GetAttribute("MaxSpeed")
        else
            self.Data.SpeedModifiers[boat.Name] = 50 -- Default speed
        end
    end
    
    -- Apply speed multiplier
    local originalSpeed = self.Data.SpeedModifiers[boat.Name]
    local newSpeed = originalSpeed * self.Config.SpeedMultiplier
    
    vehicleSeat:SetAttribute("MaxSpeed", newSpeed)
    
    if bodyVelocity then
        bodyVelocity.MaxForce = Vector3.new(newSpeed * 1000, 0, newSpeed * 1000)
    end
    
    -- Apply to boat parts
    for _, part in pairs(boat:GetDescendants()) do
        if part:IsA("BasePart") and part.Name:lower():find("engine") then
            part:SetAttribute("Power", newSpeed)
        end
    end
end

function BoatExploits:RestoreOriginalSpeed(boat)
    if not boat or not self.Data.SpeedModifiers[boat.Name] then return end
    
    local vehicleSeat = boat:FindFirstChild("VehicleSeat")
    if vehicleSeat then
        vehicleSeat:SetAttribute("MaxSpeed", self.Data.SpeedModifiers[boat.Name])
    end
end

function BoatExploits:SetSpeedMultiplier(multiplier)
    self.Config.SpeedMultiplier = multiplier
    logActivity("CONFIG", "Speed multiplier set to: x" .. multiplier)
end

--// 3. INFINITE BOAT FUEL
function BoatExploits:StartInfiniteBoatFuel()
    if self.Config.InfiniteBoatFuel then return end
    self.Config.InfiniteBoatFuel = true
    logActivity("FUEL", "Starting Infinite Boat Fuel")
    
    spawn(function()
        while self.Config.InfiniteBoatFuel do
            local boat = getPlayerBoat()
            if boat then
                self:RefillBoatFuel(boat)
            end
            wait(1)
        end
    end)
end

function BoatExploits:StopInfiniteBoatFuel()
    self.Config.InfiniteBoatFuel = false
    logActivity("FUEL", "Stopping Infinite Boat Fuel")
end

function BoatExploits:RefillBoatFuel(boat)
    if not boat then return end
    
    -- Method 1: Set fuel attributes
    boat:SetAttribute("Fuel", math.huge)
    boat:SetAttribute("MaxFuel", math.huge)
    
    -- Method 2: Find fuel-related components
    for _, part in pairs(boat:GetDescendants()) do
        if part:IsA("IntValue") and part.Name:lower():find("fuel") then
            part.Value = 999999
        elseif part:IsA("NumberValue") and part.Name:lower():find("fuel") then
            part.Value = 999999
        elseif part:IsA("BasePart") and part.Name:lower():find("fuel") then
            part:SetAttribute("FuelLevel", 999999)
        end
    end
    
    -- Method 3: Vehicle seat fuel
    local vehicleSeat = boat:FindFirstChild("VehicleSeat")
    if vehicleSeat then
        vehicleSeat:SetAttribute("Fuel", 999999)
        vehicleSeat:SetAttribute("FuelConsumption", 0)
    end
end

--// 4. AUTO SEA TRAVELER
function BoatExploits:StartAutoSeaTraveler()
    if self.Config.AutoSeaTraveler then return end
    self.Config.AutoSeaTraveler = true
    logActivity("TRAVELER", "Starting Auto Sea Traveler")
    
    spawn(function()
        while self.Config.AutoSeaTraveler do
            self:CheckAndUseSeaTraveler()
            wait(self.Config.TravelDelay)
        end
    end)
end

function BoatExploits:StopAutoSeaTraveler()
    self.Config.AutoSeaTraveler = false
    logActivity("TRAVELER", "Stopping Auto Sea Traveler")
end

function BoatExploits:CheckAndUseSeaTraveler()
    local character = lp.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local seaTravelerNPC = Workspace.world.npcs:FindFirstChild("Sea Traveler")
    if not seaTravelerNPC then return end
    
    local distance = (seaTravelerNPC.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
    
    -- If close to Sea Traveler, use teleport service
    if distance <= 50 then
        self:UseSeaTravelerTeleport()
    end
end

function BoatExploits:UseSeaTravelerTeleport(destination)
    destination = destination or "Moosewood" -- Default destination
    
    if self.RemoteEvents.SeaTraveler.Teleport then
        local success = safeInvokeRemote(self.RemoteEvents.SeaTraveler.Teleport, destination)
        if success then
            logActivity("TRAVEL", "Teleported to " .. destination .. " via Sea Traveler")
            table.insert(self.Data.TravelHistory, {
                destination = destination,
                time = os.time()
            })
        end
    end
end

function BoatExploits:TeleportToLocation(locationName)
    local locations = {
        "Moosewood", "Roslit Bay", "Forsaken Shores", "Sunstone Island",
        "Statue of Sovereignty", "Terrapin Island", "Snowcap Island",
        "Mushgrove Swamp", "Ancient Isle", "Northern Expedition"
    }
    
    if table.find(locations, locationName) then
        self:UseSeaTravelerTeleport(locationName)
    else
        warn("Invalid location:", locationName)
    end
end

--// BOAT MANAGEMENT FUNCTIONS
function BoatExploits:DespawnCurrentBoat()
    local boat = getPlayerBoat()
    if boat and self.RemoteEvents.Boats.Despawn then
        safeFireRemote(self.RemoteEvents.Boats.Despawn, boat.Name)
        logActivity("DESPAWN", "Despawned current boat")
        self.Data.CurrentBoat = nil
    end
end

function BoatExploits:OpenBoatMenu()
    if self.RemoteEvents.Boats.Open then
        safeFireRemote(self.RemoteEvents.Boats.Open)
        logActivity("MENU", "Opened boat menu")
    end
end

function BoatExploits:CloseBoatMenu()
    if self.RemoteEvents.Boats.Close then
        safeFireRemote(self.RemoteEvents.Boats.Close)
        logActivity("MENU", "Closed boat menu")
    end
end

function BoatExploits:PurchaseBoat(boatName)
    if self.RemoteEvents.Boats.Purchase then
        local success = safeInvokeRemote(self.RemoteEvents.Boats.Purchase, boatName)
        if success then
            logActivity("PURCHASE", "Purchased boat: " .. boatName)
            table.insert(self.Data.AvailableBoats, boatName)
        end
        return success
    end
    return false
end

--// ADVANCED BOAT FEATURES
function BoatExploits:AutoOptimizeBoat()
    local boat = getPlayerBoat()
    if not boat then return end
    
    -- Apply all optimizations
    if self.Config.BoatSpeedMultiplier then
        self:ApplySpeedMultiplier(boat)
    end
    
    if self.Config.InfiniteBoatFuel then
        self:RefillBoatFuel(boat)
    end
    
    -- Additional optimizations
    self:OptimizeBoatPhysics(boat)
    self:EnableBoatStability(boat)
end

function BoatExploits:OptimizeBoatPhysics(boat)
    if not boat then return end
    
    for _, part in pairs(boat:GetDescendants()) do
        if part:IsA("BasePart") then
            part.TopSurface = Enum.SurfaceType.Smooth
            part.BottomSurface = Enum.SurfaceType.Smooth
            part.Material = Enum.Material.SmoothPlastic
            
            -- Reduce drag
            if part.Name:lower():find("hull") then
                part:SetAttribute("Drag", 0)
                part:SetAttribute("WaterDrag", 0.1)
            end
        end
    end
end

function BoatExploits:EnableBoatStability(boat)
    if not boat then return end
    
    local vehicleSeat = boat:FindFirstChild("VehicleSeat")
    if vehicleSeat then
        vehicleSeat:SetAttribute("Stability", true)
        vehicleSeat:SetAttribute("AntiFlip", true)
    end
end

--// CONTROL FUNCTIONS
function BoatExploits:StartAllSystems()
    self:StartAutoBoatSpawner()
    self:StartBoatSpeedMultiplier()
    self:StartInfiniteBoatFuel()
    self:StartAutoSeaTraveler()
    logActivity("SYSTEM", "All boat exploit systems started")
end

function BoatExploits:StopAllSystems()
    self:StopAutoBoatSpawner()
    self:StopBoatSpeedMultiplier()
    self:StopInfiniteBoatFuel()
    self:StopAutoSeaTraveler()
    logActivity("SYSTEM", "All boat exploit systems stopped")
end

function BoatExploits:GetStatus()
    return {
        AutoBoatSpawner = self.Config.AutoBoatSpawner,
        BoatSpeedMultiplier = self.Config.BoatSpeedMultiplier,
        InfiniteBoatFuel = self.Config.InfiniteBoatFuel,
        AutoSeaTraveler = self.Config.AutoSeaTraveler,
        CurrentBoat = self.Data.CurrentBoat,
        SpeedMultiplier = self.Config.SpeedMultiplier,
        AvailableBoats = #self.Data.AvailableBoats,
        TravelHistory = #self.Data.TravelHistory
    }
end

--// CONFIGURATION FUNCTIONS
function BoatExploits:SetOptimalBoatType(boatType)
    self.Config.OptimalBoatType = boatType
    logActivity("CONFIG", "Optimal boat type set to: " .. boatType)
end

function BoatExploits:SetAutoSpawnDelay(delay)
    self.Config.AutoSpawnDelay = delay
    logActivity("CONFIG", "Auto spawn delay set to: " .. delay)
end

function BoatExploits:SetTravelDelay(delay)
    self.Config.TravelDelay = delay
    logActivity("CONFIG", "Travel delay set to: " .. delay)
end

--// EMERGENCY FUNCTIONS
function BoatExploits:EmergencyStop()
    self:StopAllSystems()
    self:DespawnCurrentBoat()
    logActivity("EMERGENCY", "Emergency stop activated - all systems halted")
end

function BoatExploits:ResetConfiguration()
    self.Config = {
        AutoBoatSpawner = false,
        BoatSpeedMultiplier = false,
        InfiniteBoatFuel = false,
        AutoSeaTraveler = false,
        SpeedMultiplier = 5.0,
        AutoSpawnDelay = 2,
        TravelDelay = 1,
        OptimalBoatType = "Guardian of Atlantis",
        AutoDespawnOnLeave = true,
        SmartBoatSelection = true,
        LogActivity = true
    }
    logActivity("RESET", "Configuration reset to defaults")
end

--// INITIALIZE
function BoatExploits:Initialize()
    logActivity("INIT", "Boat & Transportation Exploits Module Initialized")
    logActivity("INIT", "Available Features: Auto Spawner, Speed Multiplier, Infinite Fuel, Auto Sea Traveler")
    
    -- Auto-detect available boats
    self:ScanAvailableBoats()
end

function BoatExploits:ScanAvailableBoats()
    local boatNames = {
        "Red Racer", "Fischmas Speedboat", "Loot Rider", "Celestial Cruiser",
        "Sea Pegasus", "Guardian of Atlantis", "King of the Kraken", "Cthulhu Boat",
        "Airboat", "Serpent Cruiser", "Orca Boat", "Gondola", "Molten Jetski"
    }
    
    for _, boatName in pairs(boatNames) do
        if ReplicatedStorage.resources.replicated.instances.vessels:FindFirstChild(boatName) then
            table.insert(self.Data.AvailableBoats, boatName)
        end
    end
    
    logActivity("SCAN", "Found " .. #self.Data.AvailableBoats .. " available boat types")
end

return BoatExploits
