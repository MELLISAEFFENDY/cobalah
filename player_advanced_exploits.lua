--// Advanced Player Exploits Module
--// Based on Remote Events Analysis from fdump.txt
--// Created: September 3, 2025

local Players = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService('Workspace'))
local UserInputService = cloneref(game:GetService('UserInputService'))

local lp = Players.LocalPlayer
local AdvancedPlayerExploits = {}

--// Remote Events Storage (Based on fdump.txt)
AdvancedPlayerExploits.RemoteEvents = {
    -- Player Level & XP System
    Level = {
        SetLevel = ReplicatedStorage.packages.Net.RE.Level.SetLevel,
        AddXP = ReplicatedStorage.packages.Net.RE.Level.AddXP,
        GetLevel = ReplicatedStorage.packages.Net.RF.Level.GetLevel,
        LevelUp = ReplicatedStorage.packages.Net.RE.Level.LevelUp,
        SetXP = ReplicatedStorage.packages.Net.RE.Level.SetXP
    },
    
    -- Player Stats System
    Stats = {
        UpdateStat = ReplicatedStorage.packages.Net.RE.Stats.UpdateStat,
        GetStats = ReplicatedStorage.packages.Net.RF.Stats.GetStats,
        ResetStats = ReplicatedStorage.packages.Net.RE.Stats.ResetStats,
        SetStat = ReplicatedStorage.packages.Net.RE.Stats.SetStat,
        AddStatPoints = ReplicatedStorage.packages.Net.RE.Stats.AddStatPoints
    },
    
    -- Boost System
    Boosts = {
        ActivateBoost = ReplicatedStorage.packages.Net.RE.Boosts.ActivateBoost,
        GetActiveBoosts = ReplicatedStorage.packages.Net.RF.Boosts.GetActiveBoosts,
        ExtendBoost = ReplicatedStorage.packages.Net.RE.Boosts.ExtendBoost,
        StackBoost = ReplicatedStorage.packages.Net.RE.Boosts.StackBoost,
        RemoveBoost = ReplicatedStorage.packages.Net.RE.Boosts.RemoveBoost
    },
    
    -- Player Health & Abilities
    Health = {
        SetHealth = ReplicatedStorage.packages.Net.RE.Health.SetHealth,
        Heal = ReplicatedStorage.packages.Net.RE.Health.Heal,
        ToggleGodMode = ReplicatedStorage.packages.Net.RE.Health.ToggleGodMode,
        SetMaxHealth = ReplicatedStorage.packages.Net.RE.Health.SetMaxHealth
    },
    
    -- Player Abilities & Skills
    Abilities = {
        UnlockAbility = ReplicatedStorage.packages.Net.RE.Abilities.UnlockAbility,
        UpgradeAbility = ReplicatedStorage.packages.Net.RE.Abilities.UpgradeAbility,
        ActivateAbility = ReplicatedStorage.packages.Net.RE.Abilities.ActivateAbility,
        GetAbilities = ReplicatedStorage.packages.Net.RF.Abilities.GetAbilities
    },
    
    -- Player Multipliers
    Multipliers = {
        SetXPMultiplier = ReplicatedStorage.packages.Net.RE.Multipliers.SetXPMultiplier,
        SetCoinMultiplier = ReplicatedStorage.packages.Net.RE.Multipliers.SetCoinMultiplier,
        SetLuckMultiplier = ReplicatedStorage.packages.Net.RE.Multipliers.SetLuckMultiplier,
        GetMultipliers = ReplicatedStorage.packages.Net.RF.Multipliers.GetMultipliers
    },
    
    -- Player Movement & Physics
    Movement = {
        SetWalkSpeed = ReplicatedStorage.packages.Net.RE.Movement.SetWalkSpeed,
        SetJumpPower = ReplicatedStorage.packages.Net.RE.Movement.SetJumpPower,
        ToggleFlight = ReplicatedStorage.packages.Net.RE.Movement.ToggleFlight,
        SetGravity = ReplicatedStorage.packages.Net.RE.Movement.SetGravity
    },
    
    -- Player Data Save/Load
    PlayerData = {
        SaveData = ReplicatedStorage.packages.Net.RE.PlayerData.SaveData,
        LoadData = ReplicatedStorage.packages.Net.RE.PlayerData.LoadData,
        ResetData = ReplicatedStorage.packages.Net.RE.PlayerData.ResetData,
        BackupData = ReplicatedStorage.packages.Net.RE.PlayerData.BackupData
    }
}

--// Data Storage
AdvancedPlayerExploits.Data = {
    LevelHistory = {},
    StatChanges = {},
    BoostHistory = {},
    AbilityUnlocks = {},
    MultiplierChanges = {},
    HealthChanges = {},
    MovementChanges = {},
    PlayerProgress = {}
}

--// Configuration
AdvancedPlayerExploits.Config = {
    InstantLevelMax = false,
    XPMultiplier = false,
    InfiniteBoosts = false,
    GodModeEnhanced = false,
    StatsModifier = false,
    MaxLevel = 9999,
    XPMultiplierValue = 100,
    CoinMultiplierValue = 100,
    LuckMultiplierValue = 100,
    BoostDuration = 999999,
    StatBoostAmount = 9999,
    HealthAmount = 999999,
    WalkSpeedMultiplier = 50,
    JumpPowerMultiplier = 50,
    LogActivity = true
}

--// Player Stats Data
AdvancedPlayerExploits.StatsData = {
    BaseLevels = {
        Fishing = 1,
        Luck = 1,
        Resilience = 1,
        Enchanting = 1,
        Treasure = 1
    },
    
    MaxStatLevels = {
        Fishing = 9999,
        Luck = 9999,
        Resilience = 9999,
        Enchanting = 9999,
        Treasure = 9999
    },
    
    BoostTypes = {
        "XPBoost", "CoinBoost", "LuckBoost", "FishingBoost", "TreasureBoost",
        "SpeedBoost", "StrengthBoost", "HealthBoost", "ManaBoost", "AllStats"
    },
    
    AbilityList = {
        "AutoFish", "TreasureHunter", "LuckMaster", "SpeedDemon", "GodMode",
        "Teleportation", "Invisibility", "SuperStrength", "InfiniteStamina"
    }
}

--// Helper Functions
local function safeFireRemote(remote, ...)
    local success, result = pcall(function()
        return remote:FireServer(...)
    end)
    if not success then
        warn("Failed to fire remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function safeInvokeRemote(remote, ...)
    local success, result = pcall(function()
        return remote:InvokeServer(...)
    end)
    if not success then
        warn("Failed to invoke remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function logActivity(activity, details)
    if not AdvancedPlayerExploits.Config.LogActivity then return end
    local timestamp = os.date("%H:%M:%S")
    print(string.format("[%s] PLAYER: %s - %s", timestamp, activity, details or ""))
end

--// 1. INSTANT LEVEL MAX
function AdvancedPlayerExploits:StartInstantLevelMax()
    if self.Config.InstantLevelMax then return end
    self.Config.InstantLevelMax = true
    logActivity("LEVEL_MAX", "Starting Instant Level Max")
    
    spawn(function()
        while self.Config.InstantLevelMax do
            self:MaximizePlayerLevel()
            wait(2)
        end
    end)
end

function AdvancedPlayerExploits:StopInstantLevelMax()
    self.Config.InstantLevelMax = false
    logActivity("LEVEL_MAX", "Stopping Instant Level Max")
end

function AdvancedPlayerExploits:MaximizePlayerLevel()
    -- Method 1: Direct level setting
    self:SetPlayerLevel(self.Config.MaxLevel)
    
    -- Method 2: Massive XP addition
    self:AddMassiveXP()
    
    -- Method 3: Force level up events
    self:ForceLevelUps()
    
    -- Method 4: Manipulate character attributes
    self:ManipulateLevelAttributes()
end

function AdvancedPlayerExploits:SetPlayerLevel(level)
    -- Set through remote events
    if self.RemoteEvents.Level.SetLevel then
        safeFireRemote(self.RemoteEvents.Level.SetLevel, level)
        logActivity("LEVEL", "Set player level to: " .. level)
    end
    
    -- Set through character attributes
    local character = lp.Character
    if character then
        character:SetAttribute("Level", level)
        character:SetAttribute("PlayerLevel", level)
        character:SetAttribute("CurrentLevel", level)
    end
    
    table.insert(self.Data.LevelHistory, {level = level, timestamp = tick()})
end

function AdvancedPlayerExploits:AddMassiveXP()
    local massiveXP = 999999999
    
    if self.RemoteEvents.Level.AddXP then
        safeFireRemote(self.RemoteEvents.Level.AddXP, massiveXP)
    end
    
    if self.RemoteEvents.Level.SetXP then
        safeFireRemote(self.RemoteEvents.Level.SetXP, massiveXP)
    end
    
    logActivity("XP", "Added massive XP: " .. massiveXP)
end

function AdvancedPlayerExploits:ForceLevelUps()
    -- Force multiple level ups
    for i = 1, 100 do
        if self.RemoteEvents.Level.LevelUp then
            safeFireRemote(self.RemoteEvents.Level.LevelUp, i)
        end
    end
end

function AdvancedPlayerExploits:ManipulateLevelAttributes()
    local character = lp.Character
    if character then
        character:SetAttribute("Experience", 999999999)
        character:SetAttribute("TotalXP", 999999999)
        character:SetAttribute("LevelProgress", 1.0)
        character:SetAttribute("MaxLevel", false) -- Remove level cap
    end
end

--// 2. XP MULTIPLIER
function AdvancedPlayerExploits:StartXPMultiplier()
    if self.Config.XPMultiplier then return end
    self.Config.XPMultiplier = true
    logActivity("XP_MULT", "Starting XP Multiplier")
    
    spawn(function()
        while self.Config.XPMultiplier do
            self:ApplyXPMultipliers()
            wait(1)
        end
    end)
end

function AdvancedPlayerExploits:StopXPMultiplier()
    self.Config.XPMultiplier = false
    logActivity("XP_MULT", "Stopping XP Multiplier")
end

function AdvancedPlayerExploits:ApplyXPMultipliers()
    -- Apply XP multiplier
    if self.RemoteEvents.Multipliers.SetXPMultiplier then
        safeFireRemote(self.RemoteEvents.Multipliers.SetXPMultiplier, self.Config.XPMultiplierValue)
    end
    
    -- Apply coin multiplier
    if self.RemoteEvents.Multipliers.SetCoinMultiplier then
        safeFireRemote(self.RemoteEvents.Multipliers.SetCoinMultiplier, self.Config.CoinMultiplierValue)
    end
    
    -- Apply luck multiplier
    if self.RemoteEvents.Multipliers.SetLuckMultiplier then
        safeFireRemote(self.RemoteEvents.Multipliers.SetLuckMultiplier, self.Config.LuckMultiplierValue)
    end
    
    -- Set character attributes
    local character = lp.Character
    if character then
        character:SetAttribute("XPMultiplier", self.Config.XPMultiplierValue)
        character:SetAttribute("CoinMultiplier", self.Config.CoinMultiplierValue)
        character:SetAttribute("LuckMultiplier", self.Config.LuckMultiplierValue)
        character:SetAttribute("AllMultipliers", self.Config.XPMultiplierValue)
    end
    
    table.insert(self.Data.MultiplierChanges, {
        xp = self.Config.XPMultiplierValue,
        coins = self.Config.CoinMultiplierValue,
        luck = self.Config.LuckMultiplierValue,
        timestamp = tick()
    })
end

function AdvancedPlayerExploits:SetCustomMultiplier(multiplierType, value)
    local character = lp.Character
    if character then
        character:SetAttribute(multiplierType .. "Multiplier", value)
    end
    
    -- Try setting through remote events
    local remoteMap = {
        XP = self.RemoteEvents.Multipliers.SetXPMultiplier,
        Coin = self.RemoteEvents.Multipliers.SetCoinMultiplier,
        Luck = self.RemoteEvents.Multipliers.SetLuckMultiplier
    }
    
    local remote = remoteMap[multiplierType]
    if remote then
        safeFireRemote(remote, value)
        logActivity("MULTIPLIER", multiplierType .. " multiplier set to: " .. value)
    end
end

--// 3. INFINITE BOOSTS
function AdvancedPlayerExploits:StartInfiniteBoosts()
    if self.Config.InfiniteBoosts then return end
    self.Config.InfiniteBoosts = true
    logActivity("BOOSTS", "Starting Infinite Boosts")
    
    spawn(function()
        while self.Config.InfiniteBoosts do
            self:ActivateAllBoosts()
            self:ExtendBoostDurations()
            wait(5)
        end
    end)
end

function AdvancedPlayerExploits:StopInfiniteBoosts()
    self.Config.InfiniteBoosts = false
    logActivity("BOOSTS", "Stopping Infinite Boosts")
end

function AdvancedPlayerExploits:ActivateAllBoosts()
    -- Activate all boost types
    for _, boostType in pairs(self.StatsData.BoostTypes) do
        self:ActivateSpecificBoost(boostType)
    end
end

function AdvancedPlayerExploits:ActivateSpecificBoost(boostType)
    if self.RemoteEvents.Boosts.ActivateBoost then
        safeFireRemote(self.RemoteEvents.Boosts.ActivateBoost, boostType, self.Config.BoostDuration)
    end
    
    -- Stack the boost for maximum effect
    if self.RemoteEvents.Boosts.StackBoost then
        for i = 1, 10 do -- Stack 10 times
            safeFireRemote(self.RemoteEvents.Boosts.StackBoost, boostType, i)
        end
    end
    
    logActivity("BOOST", "Activated and stacked boost: " .. boostType)
    table.insert(self.Data.BoostHistory, {type = boostType, duration = self.Config.BoostDuration, timestamp = tick()})
end

function AdvancedPlayerExploits:ExtendBoostDurations()
    -- Extend all active boosts
    for _, boostType in pairs(self.StatsData.BoostTypes) do
        if self.RemoteEvents.Boosts.ExtendBoost then
            safeFireRemote(self.RemoteEvents.Boosts.ExtendBoost, boostType, self.Config.BoostDuration)
        end
    end
end

function AdvancedPlayerExploits:CreatePermanentBoosts()
    local character = lp.Character
    if character then
        for _, boostType in pairs(self.StatsData.BoostTypes) do
            character:SetAttribute("Boost_" .. boostType, true)
            character:SetAttribute("BoostDuration_" .. boostType, 999999)
            character:SetAttribute("BoostActive_" .. boostType, true)
        end
    end
    
    logActivity("BOOSTS", "Created permanent boosts")
end

--// 4. GOD MODE ENHANCED
function AdvancedPlayerExploits:StartGodModeEnhanced()
    if self.Config.GodModeEnhanced then return end
    self.Config.GodModeEnhanced = true
    logActivity("GOD_MODE", "Starting Enhanced God Mode")
    
    spawn(function()
        while self.Config.GodModeEnhanced do
            self:ApplyEnhancedGodMode()
            wait(1)
        end
    end)
end

function AdvancedPlayerExploits:StopGodModeEnhanced()
    self.Config.GodModeEnhanced = false
    logActivity("GOD_MODE", "Stopping Enhanced God Mode")
end

function AdvancedPlayerExploits:ApplyEnhancedGodMode()
    -- Method 1: Maximum health
    self:SetMaximumHealth()
    
    -- Method 2: Toggle god mode
    self:ToggleGodModeState()
    
    -- Method 3: Immunity attributes
    self:SetImmunityAttributes()
    
    -- Method 4: Enhanced protection
    self:ApplyEnhancedProtection()
end

function AdvancedPlayerExploits:SetMaximumHealth()
    if self.RemoteEvents.Health.SetMaxHealth then
        safeFireRemote(self.RemoteEvents.Health.SetMaxHealth, self.Config.HealthAmount)
    end
    
    if self.RemoteEvents.Health.SetHealth then
        safeFireRemote(self.RemoteEvents.Health.SetHealth, self.Config.HealthAmount)
    end
    
    if self.RemoteEvents.Health.Heal then
        safeFireRemote(self.RemoteEvents.Health.Heal, self.Config.HealthAmount)
    end
    
    local character = lp.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.MaxHealth = self.Config.HealthAmount
            humanoid.Health = self.Config.HealthAmount
        end
    end
end

function AdvancedPlayerExploits:ToggleGodModeState()
    if self.RemoteEvents.Health.ToggleGodMode then
        safeFireRemote(self.RemoteEvents.Health.ToggleGodMode, true)
    end
end

function AdvancedPlayerExploits:SetImmunityAttributes()
    local character = lp.Character
    if character then
        character:SetAttribute("GodMode", true)
        character:SetAttribute("Invincible", true)
        character:SetAttribute("CanTakeDamage", false)
        character:SetAttribute("Immortal", true)
        character:SetAttribute("HealthLocked", true)
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:SetAttribute("GodMode", true)
            humanoid.PlatformStand = false
        end
    end
end

function AdvancedPlayerExploits:ApplyEnhancedProtection()
    local character = lp.Character
    if character then
        -- Protect against all damage types
        local damageTypes = {"Fall", "Fire", "Water", "Poison", "Electric", "Magic", "Physical"}
        
        for _, damageType in pairs(damageTypes) do
            character:SetAttribute("Immune_" .. damageType, true)
            character:SetAttribute("Resist_" .. damageType, 100)
        end
        
        -- Additional protections
        character:SetAttribute("NoKnockback", true)
        character:SetAttribute("NoStun", true)
        character:SetAttribute("NoSlow", true)
    end
    
    table.insert(self.Data.HealthChanges, {type = "god_mode", value = true, timestamp = tick()})
end

--// 5. STATS MODIFIER
function AdvancedPlayerExploits:StartStatsModifier()
    if self.Config.StatsModifier then return end
    self.Config.StatsModifier = true
    logActivity("STATS", "Starting Stats Modifier")
    
    spawn(function()
        while self.Config.StatsModifier do
            self:ModifyAllStats()
            wait(3)
        end
    end)
end

function AdvancedPlayerExploits:StopStatsModifier()
    self.Config.StatsModifier = false
    logActivity("STATS", "Stopping Stats Modifier")
end

function AdvancedPlayerExploits:ModifyAllStats()
    -- Maximize all base stats
    for statName, maxLevel in pairs(self.StatsData.MaxStatLevels) do
        self:SetStatLevel(statName, maxLevel)
    end
    
    -- Apply stat boost effects
    self:ApplyStatBoosts()
    
    -- Unlock all abilities
    self:UnlockAllAbilities()
    
    -- Enhance movement capabilities
    self:EnhanceMovement()
end

function AdvancedPlayerExploits:SetStatLevel(statName, level)
    if self.RemoteEvents.Stats.SetStat then
        safeFireRemote(self.RemoteEvents.Stats.SetStat, statName, level)
    end
    
    if self.RemoteEvents.Stats.UpdateStat then
        safeFireRemote(self.RemoteEvents.Stats.UpdateStat, statName, level)
    end
    
    if self.RemoteEvents.Stats.AddStatPoints then
        safeFireRemote(self.RemoteEvents.Stats.AddStatPoints, statName, level)
    end
    
    local character = lp.Character
    if character then
        character:SetAttribute("Stat_" .. statName, level)
        character:SetAttribute(statName .. "Level", level)
        character:SetAttribute(statName .. "Points", level)
    end
    
    logActivity("STAT", statName .. " set to level: " .. level)
    table.insert(self.Data.StatChanges, {stat = statName, level = level, timestamp = tick()})
end

function AdvancedPlayerExploits:ApplyStatBoosts()
    local character = lp.Character
    if character then
        character:SetAttribute("AllStatsBoost", self.Config.StatBoostAmount)
        character:SetAttribute("StatMultiplier", 100)
        character:SetAttribute("StatsMaxed", true)
    end
end

function AdvancedPlayerExploits:UnlockAllAbilities()
    for _, ability in pairs(self.StatsData.AbilityList) do
        if self.RemoteEvents.Abilities.UnlockAbility then
            safeFireRemote(self.RemoteEvents.Abilities.UnlockAbility, ability)
        end
        
        if self.RemoteEvents.Abilities.UpgradeAbility then
            safeFireRemote(self.RemoteEvents.Abilities.UpgradeAbility, ability, 999) -- Max upgrade
        end
        
        if self.RemoteEvents.Abilities.ActivateAbility then
            safeFireRemote(self.RemoteEvents.Abilities.ActivateAbility, ability, true)
        end
        
        table.insert(self.Data.AbilityUnlocks, {ability = ability, timestamp = tick()})
    end
    
    logActivity("ABILITIES", "Unlocked and maxed all abilities")
end

function AdvancedPlayerExploits:EnhanceMovement()
    local character = lp.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16 * self.Config.WalkSpeedMultiplier
            humanoid.JumpPower = 50 * self.Config.JumpPowerMultiplier
        end
    end
    
    -- Use remote events for movement
    if self.RemoteEvents.Movement.SetWalkSpeed then
        safeFireRemote(self.RemoteEvents.Movement.SetWalkSpeed, 16 * self.Config.WalkSpeedMultiplier)
    end
    
    if self.RemoteEvents.Movement.SetJumpPower then
        safeFireRemote(self.RemoteEvents.Movement.SetJumpPower, 50 * self.Config.JumpPowerMultiplier)
    end
    
    if self.RemoteEvents.Movement.ToggleFlight then
        safeFireRemote(self.RemoteEvents.Movement.ToggleFlight, true)
    end
    
    if self.RemoteEvents.Movement.SetGravity then
        safeFireRemote(self.RemoteEvents.Movement.SetGravity, 50) -- Reduced gravity
    end
    
    table.insert(self.Data.MovementChanges, {
        walkSpeed = 16 * self.Config.WalkSpeedMultiplier,
        jumpPower = 50 * self.Config.JumpPowerMultiplier,
        timestamp = tick()
    })
end

--// UTILITY FUNCTIONS
function AdvancedPlayerExploits:GetPlayerStatus()
    local status = {
        currentLevel = self:GetCurrentLevel(),
        totalXP = self:GetTotalXP(),
        activeBoosts = self:GetActiveBoosts(),
        godModeActive = self:IsGodModeActive(),
        statsMaxed = self:AreStatsMaxed(),
        abilitiesUnlocked = #self.Data.AbilityUnlocks
    }
    
    return status
end

function AdvancedPlayerExploits:GetCurrentLevel()
    if self.RemoteEvents.Level.GetLevel then
        local success, level = safeInvokeRemote(self.RemoteEvents.Level.GetLevel)
        return success and level or 1
    end
    
    local character = lp.Character
    if character then
        return character:GetAttribute("Level") or 1
    end
    
    return 1
end

function AdvancedPlayerExploits:GetTotalXP()
    local character = lp.Character
    if character then
        return character:GetAttribute("Experience") or 0
    end
    return 0
end

function AdvancedPlayerExploits:GetActiveBoosts()
    if self.RemoteEvents.Boosts.GetActiveBoosts then
        local success, boosts = safeInvokeRemote(self.RemoteEvents.Boosts.GetActiveBoosts)
        return success and #boosts or 0
    end
    return #self.Data.BoostHistory
end

function AdvancedPlayerExploits:IsGodModeActive()
    local character = lp.Character
    if character then
        return character:GetAttribute("GodMode") or false
    end
    return false
end

function AdvancedPlayerExploits:AreStatsMaxed()
    local character = lp.Character
    if character then
        return character:GetAttribute("StatsMaxed") or false
    end
    return false
end

function AdvancedPlayerExploits:PrintPlayerStatus()
    local status = self:GetPlayerStatus()
    
    print("\n🎮 ADVANCED PLAYER STATUS")
    print("═══════════════════════════")
    print("📊 Current Level: " .. status.currentLevel)
    print("⚡ Total XP: " .. status.totalXP)
    print("🚀 Active Boosts: " .. status.activeBoosts)
    print("🛡️ God Mode: " .. (status.godModeActive and "🟢 ACTIVE" or "🔴 INACTIVE"))
    print("📈 Stats Maxed: " .. (status.statsMaxed and "🟢 YES" or "🔴 NO"))
    print("🎯 Abilities Unlocked: " .. status.abilitiesUnlocked)
    
    print("\n🔄 SYSTEM STATUS:")
    print("├─ Instant Level Max: " .. (self.Config.InstantLevelMax and "🟢 ON" or "🔴 OFF"))
    print("├─ XP Multiplier: " .. (self.Config.XPMultiplier and "🟢 ON (" .. self.Config.XPMultiplierValue .. "x)" or "🔴 OFF"))
    print("├─ Infinite Boosts: " .. (self.Config.InfiniteBoosts and "🟢 ON" or "🔴 OFF"))
    print("├─ God Mode Enhanced: " .. (self.Config.GodModeEnhanced and "🟢 ON" or "🔴 OFF"))
    print("└─ Stats Modifier: " .. (self.Config.StatsModifier and "🟢 ON" or "🔴 OFF"))
end

--// CONTROL FUNCTIONS
function AdvancedPlayerExploits:StartAllSystems()
    self:StartInstantLevelMax()
    self:StartXPMultiplier()
    self:StartInfiniteBoosts()
    self:StartGodModeEnhanced()
    self:StartStatsModifier()
    logActivity("SYSTEM", "All advanced player exploit systems started")
end

function AdvancedPlayerExploits:StopAllSystems()
    self:StopInstantLevelMax()
    self:StopXPMultiplier()
    self:StopInfiniteBoosts()
    self:StopGodModeEnhanced()
    self:StopStatsModifier()
    logActivity("SYSTEM", "All advanced player exploit systems stopped")
end

function AdvancedPlayerExploits:GetStatus()
    return {
        InstantLevelMax = self.Config.InstantLevelMax,
        XPMultiplier = self.Config.XPMultiplier,
        InfiniteBoosts = self.Config.InfiniteBoosts,
        GodModeEnhanced = self.Config.GodModeEnhanced,
        StatsModifier = self.Config.StatsModifier,
        CurrentLevel = self:GetCurrentLevel(),
        TotalXP = self:GetTotalXP(),
        ActiveBoosts = self:GetActiveBoosts(),
        GodModeActive = self:IsGodModeActive()
    }
end

--// EMERGENCY FUNCTIONS
function AdvancedPlayerExploits:EmergencyStop()
    self:StopAllSystems()
    logActivity("EMERGENCY", "Emergency stop activated - all advanced player systems halted")
end

function AdvancedPlayerExploits:ResetToDefaults()
    -- Reset player to normal values
    self:SetPlayerLevel(1)
    self:SetCustomMultiplier("XP", 1)
    self:SetCustomMultiplier("Coin", 1)
    self:SetCustomMultiplier("Luck", 1)
    
    local character = lp.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
            humanoid.JumpPower = 50
            humanoid.MaxHealth = 100
            humanoid.Health = 100
        end
    end
    
    logActivity("RESET", "Player stats reset to defaults")
end

--// INITIALIZE
function AdvancedPlayerExploits:Initialize()
    logActivity("INIT", "Advanced Player Exploits Module Initialized")
    logActivity("INIT", "Available Features: Instant Level Max, XP Multiplier, Infinite Boosts, God Mode Enhanced, Stats Modifier")
end

return AdvancedPlayerExploits
