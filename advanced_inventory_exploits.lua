--// Advanced Item & Inventory Exploits Module
--// Based on Remote Events Analysis from fdump.txt
--// Created: September 3, 2025

local Players = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local RunService = cloneref(game:GetService('RunService'))
local TweenService = cloneref(game:GetService('TweenService'))
local HttpService = cloneref(game:GetService('HttpService'))
local UserInputService = cloneref(game:GetService('UserInputService'))

local lp = Players.LocalPlayer
local InventoryExploits = {}

--// Remote Events Storage (Based on fdump.txt)
InventoryExploits.RemoteEvents = {
    -- Backpack & Equipment
    Backpack = {
        Equip = ReplicatedStorage.packages.Net.RE.Backpack.Equip,
        Favourite = ReplicatedStorage.packages.Net.RE.Backpack.Favourite,
        SetHotbar = ReplicatedStorage.packages.Net.RE.Backpack.SetHotbar
    },
    
    -- Item Collection
    ItemCollector = {
        Collect = ReplicatedStorage.packages.Net.RF.ItemCollectorCollect
    },
    
    -- Skin System
    SkinCrates = {
        Purchase = ReplicatedStorage.packages.Net.RF.SkinCrates.Purchase,
        RequestSpin = ReplicatedStorage.packages.Net.RF.SkinCrates.RequestSpin
    },
    
    -- Rod Equipment
    Rod = {
        Equip = ReplicatedStorage.packages.Net.RE.Rod.Equip,
        Favorite = ReplicatedStorage.packages.Net.RF.Rod.Favorite,
        ChangeRodSkin = ReplicatedStorage.packages.Net.RE.ChangeRodSkin,
        RodSkinService = ReplicatedStorage.packages.Net.RF.RodSkinService.HasSkin
    },
    
    -- Equipment
    Equipment = {
        Lantern = ReplicatedStorage.packages.Net.RE.Lantern.Equip,
        Bobber = ReplicatedStorage.packages.Net.RE.Bobber.Equip,
        Bait = ReplicatedStorage.packages.Net.RE.Bait.Equip,
        Titles = ReplicatedStorage.packages.Net.RE.Titles.Equip
    },
    
    -- Aquarium & Fish
    Aquarium = {
        PlaceFish = ReplicatedStorage.packages.Net.RE.Aquarium.PlaceFish,
        RemoveFish = ReplicatedStorage.packages.Net.RE.Aquarium.RemoveFish,
        PurchaseFish = ReplicatedStorage.packages.Net.RE.Aquarium.PurchaseFish,
        GetFish = ReplicatedStorage.packages.Net.RF.Aquarium.GetFish
    },
    
    -- Spawning Items
    ItemSpawn = {
        Collect = ReplicatedStorage.packages.Net.RF.ItemSpawnCollect
    }
}

--// Data Storage
InventoryExploits.Data = {
    ItemDatabase = {},
    SkinDatabase = {},
    EquipmentDatabase = {},
    CollectedItems = {},
    DuplicatedItems = {},
    OptimalEquipment = {},
    AutoCollectList = {},
    SkinUnlockList = {}
}

--// Configuration
InventoryExploits.Config = {
    AutoCollector = false,
    InventoryDuplicator = false,
    SkinUnlocker = false,
    AutoEquipper = false,
    ItemTeleporter = false,
    CollectDelay = 0.5,
    DuplicateDelay = 1,
    EquipDelay = 0.3,
    MaxDuplicates = 99,
    AutoEquipBestGear = true,
    TeleportRadius = 1000,
    LogActivity = true
}

--// Helper Functions
local function safeFireRemote(remote, ...)
    local success, result = pcall(function()
        return remote:FireServer(...)
    end)
    if not success then
        warn("Failed to fire remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function safeInvokeRemote(remote, ...)
    local success, result = pcall(function()
        return remote:InvokeServer(...)
    end)
    if not success then
        warn("Failed to invoke remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function logActivity(activity, details)
    if not InventoryExploits.Config.LogActivity then return end
    local timestamp = os.date("%H:%M:%S")
    print(string.format("[%s] INVENTORY: %s - %s", timestamp, activity, details or ""))
end

local function getPlayerInventory()
    return lp.Backpack:GetChildren()
end

local function getEquippedTool()
    local character = lp.Character
    if character then
        for _, item in pairs(character:GetChildren()) do
            if item:IsA("Tool") then
                return item
            end
        end
    end
    return nil
end

--// 1. INVENTORY DUPLICATOR
function InventoryExploits:StartInventoryDuplicator()
    if self.Config.InventoryDuplicator then return end
    self.Config.InventoryDuplicator = true
    logActivity("DUPLICATOR", "Starting Inventory Duplicator")
    
    spawn(function()
        while self.Config.InventoryDuplicator do
            local inventory = getPlayerInventory()
            for _, item in pairs(inventory) do
                if item:IsA("Tool") and self:ShouldDuplicateItem(item) then
                    self:DuplicateItem(item)
                    wait(self.Config.DuplicateDelay)
                end
            end
            wait(2)
        end
    end)
end

function InventoryExploits:StopInventoryDuplicator()
    self.Config.InventoryDuplicator = false
    logActivity("DUPLICATOR", "Stopping Inventory Duplicator")
end

function InventoryExploits:DuplicateItem(item)
    if not item or not item.Parent then return end
    
    logActivity("DUPLICATE", "Attempting to duplicate: " .. item.Name)
    
    -- Method 1: Backpack manipulation
    local success1 = pcall(function()
        local clone = item:Clone()
        clone.Parent = lp.Backpack
        self.Data.DuplicatedItems[item.Name] = (self.Data.DuplicatedItems[item.Name] or 0) + 1
    end)
    
    -- Method 2: Remote event exploitation
    if not success1 and self.RemoteEvents.Backpack.Equip then
        local success2 = safeFireRemote(self.RemoteEvents.Backpack.Equip, item.Name, "duplicate")
    end
    
    -- Method 3: ItemCollector exploitation
    if self.RemoteEvents.ItemCollector.Collect then
        local success3 = safeInvokeRemote(self.RemoteEvents.ItemCollector.Collect, item.Name, 999)
    end
end

function InventoryExploits:ShouldDuplicateItem(item)
    local duplicateCount = self.Data.DuplicatedItems[item.Name] or 0
    return duplicateCount < self.Config.MaxDuplicates and self:IsValuableItem(item)
end

function InventoryExploits:IsValuableItem(item)
    local valuableItems = {
        "Rod", "Bait", "Fish", "Gem", "Crystal", "Treasure", "Coin", "Token"
    }
    
    for _, valuable in pairs(valuableItems) do
        if string.find(item.Name:lower(), valuable:lower()) then
            return true
        end
    end
    return false
end

--// 2. AUTO ITEM COLLECTOR
function InventoryExploits:StartAutoItemCollector()
    if self.Config.AutoCollector then return end
    self.Config.AutoCollector = true
    logActivity("COLLECTOR", "Starting Auto Item Collector")
    
    spawn(function()
        while self.Config.AutoCollector do
            self:CollectNearbyItems()
            self:CollectWorldItems()
            self:CollectSpawnedItems()
            wait(self.Config.CollectDelay)
        end
    end)
end

function InventoryExploits:StopAutoItemCollector()
    self.Config.AutoCollector = false
    logActivity("COLLECTOR", "Stopping Auto Item Collector")
end

function InventoryExploits:CollectNearbyItems()
    local character = lp.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local playerPosition = character.HumanoidRootPart.Position
    
    -- Collect items in workspace
    for _, item in pairs(workspace:GetDescendants()) do
        if item:IsA("Tool") or item:IsA("Part") and item.Name:find("Item") then
            local distance = (item.Position - playerPosition).Magnitude
            if distance <= self.Config.TeleportRadius then
                self:CollectItem(item)
            end
        end
    end
end

function InventoryExploits:CollectWorldItems()
    -- Use ItemCollector remote to collect all available items
    if self.RemoteEvents.ItemCollector.Collect then
        local success = safeInvokeRemote(self.RemoteEvents.ItemCollector.Collect, "all", 999)
        if success then
            logActivity("COLLECTOR", "Collected world items via remote")
        end
    end
    
    -- Use ItemSpawn collect
    if self.RemoteEvents.ItemSpawn.Collect then
        local success = safeInvokeRemote(self.RemoteEvents.ItemSpawn.Collect, "all")
        if success then
            logActivity("COLLECTOR", "Collected spawned items via remote")
        end
    end
end

function InventoryExploits:CollectSpawnedItems()
    -- Scan for specific item spawns based on game structure
    local zones = {"fishing", "treasure", "special"}
    
    for _, zone in pairs(zones) do
        if workspace:FindFirstChild(zone) then
            for _, item in pairs(workspace[zone]:GetDescendants()) do
                if item:IsA("Tool") or (item:IsA("Part") and item:GetAttribute("Collectible")) then
                    self:CollectItem(item)
                end
            end
        end
    end
end

function InventoryExploits:CollectItem(item)
    if not item or not item.Parent then return end
    
    local success = pcall(function()
        if item:IsA("Tool") then
            item.Parent = lp.Backpack
            logActivity("COLLECT", "Collected tool: " .. item.Name)
        elseif self.RemoteEvents.ItemCollector.Collect then
            safeInvokeRemote(self.RemoteEvents.ItemCollector.Collect, item.Name)
            logActivity("COLLECT", "Collected item via remote: " .. item.Name)
        end
    end)
    
    if success then
        self.Data.CollectedItems[item.Name] = (self.Data.CollectedItems[item.Name] or 0) + 1
    end
end

--// 3. SKIN UNLOCKER
function InventoryExploits:StartSkinUnlocker()
    if self.Config.SkinUnlocker then return end
    self.Config.SkinUnlocker = true
    logActivity("SKIN", "Starting Skin Unlocker")
    
    spawn(function()
        self:UnlockAllSkins()
    end)
end

function InventoryExploits:UnlockAllSkins()
    local skinTypes = {"Rod", "Boat", "Bobber", "Equipment", "Title"}
    
    for _, skinType in pairs(skinTypes) do
        self:UnlockSkinType(skinType)
        wait(1)
    end
end

function InventoryExploits:UnlockSkinType(skinType)
    logActivity("SKIN", "Unlocking all " .. skinType .. " skins")
    
    -- Method 1: SkinCrates exploitation
    if self.RemoteEvents.SkinCrates.Purchase then
        for i = 1, 50 do -- Try to unlock up to 50 skins per type
            local success = safeInvokeRemote(self.RemoteEvents.SkinCrates.Purchase, skinType .. "_" .. i, 0) -- Try with 0 cost
            if success then
                logActivity("SKIN", "Unlocked " .. skinType .. " skin #" .. i)
            end
            wait(0.1)
        end
    end
    
    -- Method 2: Direct skin crate spinning
    if self.RemoteEvents.SkinCrates.RequestSpin then
        for i = 1, 20 do
            local success = safeInvokeRemote(self.RemoteEvents.SkinCrates.RequestSpin, skinType .. "_crate", 0)
            if success then
                logActivity("SKIN", "Spun " .. skinType .. " crate #" .. i)
            end
            wait(0.2)
        end
    end
    
    -- Method 3: Rod skin specific
    if skinType == "Rod" and self.RemoteEvents.Rod.ChangeRodSkin then
        local rodSkins = {"Legendary", "Mythic", "Divine", "Celestial", "Abyssal", "Ancient"}
        for _, skinName in pairs(rodSkins) do
            safeFireRemote(self.RemoteEvents.Rod.ChangeRodSkin, skinName, true)
            logActivity("SKIN", "Unlocked rod skin: " .. skinName)
            wait(0.1)
        end
    end
end

--// 4. AUTO EQUIPMENT OPTIMIZER
function InventoryExploits:StartAutoEquipper()
    if self.Config.AutoEquipper then return end
    self.Config.AutoEquipper = true
    logActivity("EQUIPPER", "Starting Auto Equipment Optimizer")
    
    spawn(function()
        while self.Config.AutoEquipper do
            self:OptimizeEquipment()
            wait(5) -- Check every 5 seconds
        end
    end)
end

function InventoryExploits:StopAutoEquipper()
    self.Config.AutoEquipper = false
    logActivity("EQUIPPER", "Stopping Auto Equipment Optimizer")
end

function InventoryExploits:OptimizeEquipment()
    self:EquipBestRod()
    self:EquipBestBait()
    self:EquipBestBobber()
    self:EquipBestLantern()
    self:EquipBestTitle()
end

function InventoryExploits:EquipBestRod()
    local bestRod = self:FindBestItem("Rod")
    if bestRod and self.RemoteEvents.Rod.Equip then
        safeFireRemote(self.RemoteEvents.Rod.Equip, bestRod.Name)
        logActivity("EQUIP", "Equipped best rod: " .. bestRod.Name)
    end
end

function InventoryExploits:EquipBestBait()
    local bestBait = self:FindBestItem("Bait")
    if bestBait and self.RemoteEvents.Equipment.Bait then
        safeFireRemote(self.RemoteEvents.Equipment.Bait, bestBait.Name)
        logActivity("EQUIP", "Equipped best bait: " .. bestBait.Name)
    end
end

function InventoryExploits:EquipBestBobber()
    local bestBobber = self:FindBestItem("Bobber")
    if bestBobber and self.RemoteEvents.Equipment.Bobber then
        safeFireRemote(self.RemoteEvents.Equipment.Bobber, bestBobber.Name)
        logActivity("EQUIP", "Equipped best bobber: " .. bestBobber.Name)
    end
end

function InventoryExploits:EquipBestLantern()
    local bestLantern = self:FindBestItem("Lantern")
    if bestLantern and self.RemoteEvents.Equipment.Lantern then
        safeFireRemote(self.RemoteEvents.Equipment.Lantern, bestLantern.Name)
        logActivity("EQUIP", "Equipped best lantern: " .. bestLantern.Name)
    end
end

function InventoryExploits:EquipBestTitle()
    local bestTitle = self:FindBestItem("Title")
    if bestTitle and self.RemoteEvents.Equipment.Titles then
        safeFireRemote(self.RemoteEvents.Equipment.Titles, bestTitle.Name)
        logActivity("EQUIP", "Equipped best title: " .. bestTitle.Name)
    end
end

function InventoryExploits:FindBestItem(itemType)
    local inventory = getPlayerInventory()
    local bestItem = nil
    local bestRating = 0
    
    for _, item in pairs(inventory) do
        if string.find(item.Name:lower(), itemType:lower()) then
            local rating = self:GetItemRating(item)
            if rating > bestRating then
                bestRating = rating
                bestItem = item
            end
        end
    end
    
    return bestItem
end

function InventoryExploits:GetItemRating(item)
    local rarityMultipliers = {
        common = 1,
        uncommon = 2,
        rare = 3,
        epic = 4,
        legendary = 5,
        mythic = 6,
        divine = 7,
        celestial = 8,
        abyssal = 9,
        ancient = 10
    }
    
    local itemName = item.Name:lower()
    local rating = 1
    
    -- Check rarity
    for rarity, multiplier in pairs(rarityMultipliers) do
        if string.find(itemName, rarity) then
            rating = rating * multiplier
            break
        end
    end
    
    -- Check for special attributes
    if item:GetAttribute("Power") then
        rating = rating + (item:GetAttribute("Power") or 0)
    end
    
    if item:GetAttribute("Luck") then
        rating = rating + (item:GetAttribute("Luck") or 0) * 2
    end
    
    if item:GetAttribute("Speed") then
        rating = rating + (item:GetAttribute("Speed") or 0) * 1.5
    end
    
    return rating
end

--// 5. ITEM TELEPORTER
function InventoryExploits:StartItemTeleporter()
    if self.Config.ItemTeleporter then return end
    self.Config.ItemTeleporter = true
    logActivity("TELEPORTER", "Starting Item Teleporter")
    
    spawn(function()
        while self.Config.ItemTeleporter do
            self:TeleportNearbyItems()
            wait(1)
        end
    end)
end

function InventoryExploits:StopItemTeleporter()
    self.Config.ItemTeleporter = false
    logActivity("TELEPORTER", "Stopping Item Teleporter")
end

function InventoryExploits:TeleportNearbyItems()
    local character = lp.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local playerPosition = character.HumanoidRootPart.Position
    
    for _, item in pairs(workspace:GetDescendants()) do
        if self:IsCollectibleItem(item) then
            local distance = (item.Position - playerPosition).Magnitude
            if distance <= self.Config.TeleportRadius and distance > 5 then
                self:TeleportItemToPlayer(item)
            end
        end
    end
end

function InventoryExploits:IsCollectibleItem(item)
    if not item:IsA("BasePart") and not item:IsA("Tool") then return false end
    
    local collectibleKeywords = {"treasure", "coin", "gem", "crystal", "fish", "bait", "rod", "item"}
    local itemName = item.Name:lower()
    
    for _, keyword in pairs(collectibleKeywords) do
        if string.find(itemName, keyword) then
            return true
        end
    end
    
    return item:GetAttribute("Collectible") == true
end

function InventoryExploits:TeleportItemToPlayer(item)
    local character = lp.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local success = pcall(function()
        local playerPosition = character.HumanoidRootPart.Position
        local randomOffset = Vector3.new(
            math.random(-2, 2),
            math.random(0, 3),
            math.random(-2, 2)
        )
        
        if item:IsA("BasePart") and item.Parent then
            item.CFrame = CFrame.new(playerPosition + randomOffset)
            logActivity("TELEPORT", "Teleported item: " .. item.Name)
        elseif item:IsA("Tool") then
            item.Parent = lp.Backpack
            logActivity("TELEPORT", "Teleported tool to backpack: " .. item.Name)
        end
    end)
    
    if not success then
        -- Fallback: Try using remote events
        if self.RemoteEvents.ItemCollector.Collect then
            safeInvokeRemote(self.RemoteEvents.ItemCollector.Collect, item.Name)
        end
    end
end

--// CONTROL FUNCTIONS
function InventoryExploits:StartAllSystems()
    self:StartInventoryDuplicator()
    self:StartAutoItemCollector()
    self:StartSkinUnlocker()
    self:StartAutoEquipper()
    self:StartItemTeleporter()
    logActivity("SYSTEM", "All inventory exploit systems started")
end

function InventoryExploits:StopAllSystems()
    self:StopInventoryDuplicator()
    self:StopAutoItemCollector()
    self.Config.SkinUnlocker = false
    self:StopAutoEquipper()
    self:StopItemTeleporter()
    logActivity("SYSTEM", "All inventory exploit systems stopped")
end

function InventoryExploits:GetStatus()
    return {
        InventoryDuplicator = self.Config.InventoryDuplicator,
        AutoItemCollector = self.Config.AutoCollector,
        SkinUnlocker = self.Config.SkinUnlocker,
        AutoEquipper = self.Config.AutoEquipper,
        ItemTeleporter = self.Config.ItemTeleporter,
        CollectedItems = #self.Data.CollectedItems,
        DuplicatedItems = #self.Data.DuplicatedItems
    }
end

--// CONFIGURATION FUNCTIONS
function InventoryExploits:SetCollectDelay(delay)
    self.Config.CollectDelay = delay
    logActivity("CONFIG", "Collect delay set to: " .. delay)
end

function InventoryExploits:SetDuplicateDelay(delay)
    self.Config.DuplicateDelay = delay
    logActivity("CONFIG", "Duplicate delay set to: " .. delay)
end

function InventoryExploits:SetMaxDuplicates(max)
    self.Config.MaxDuplicates = max
    logActivity("CONFIG", "Max duplicates set to: " .. max)
end

function InventoryExploits:SetTeleportRadius(radius)
    self.Config.TeleportRadius = radius
    logActivity("CONFIG", "Teleport radius set to: " .. radius)
end

function InventoryExploits:AddToAutoCollectList(itemName)
    table.insert(self.Data.AutoCollectList, itemName)
    logActivity("CONFIG", "Added to auto-collect list: " .. itemName)
end

function InventoryExploits:RemoveFromAutoCollectList(itemName)
    for i, name in pairs(self.Data.AutoCollectList) do
        if name == itemName then
            table.remove(self.Data.AutoCollectList, i)
            logActivity("CONFIG", "Removed from auto-collect list: " .. itemName)
            break
        end
    end
end

--// EMERGENCY FUNCTIONS
function InventoryExploits:EmergencyStop()
    self:StopAllSystems()
    logActivity("EMERGENCY", "Emergency stop activated - all systems halted")
end

function InventoryExploits:ClearDuplicatedItems()
    self.Data.DuplicatedItems = {}
    logActivity("CLEAR", "Duplicated items data cleared")
end

function InventoryExploits:ResetConfiguration()
    self.Config = {
        AutoCollector = false,
        InventoryDuplicator = false,
        SkinUnlocker = false,
        AutoEquipper = false,
        ItemTeleporter = false,
        CollectDelay = 0.5,
        DuplicateDelay = 1,
        EquipDelay = 0.3,
        MaxDuplicates = 99,
        AutoEquipBestGear = true,
        TeleportRadius = 1000,
        LogActivity = true
    }
    logActivity("RESET", "Configuration reset to defaults")
end

--// INITIALIZE
function InventoryExploits:Initialize()
    logActivity("INIT", "Advanced Inventory Exploits Module Initialized")
    logActivity("INIT", "Available Features: Duplicator, Collector, Skin Unlocker, Auto Equipper, Item Teleporter")
end

return InventoryExploits
