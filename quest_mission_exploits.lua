--// Quest & Mission Exploits Module
--// Based on Remote Events Analysis from fdump.txt
--// Created: September 3, 2025

local Players = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService('Workspace'))

local lp = Players.LocalPlayer
local QuestExploits = {}

--// Remote Events Storage (Based on fdump.txt)
QuestExploits.RemoteEvents = {
    -- Time Mission System
    TimeMission = {
        ClaimReward = ReplicatedStorage.packages.Net.RE.TimeMission.ClaimReward,
        Skip = ReplicatedStorage.packages.Net.RE.TimeMission.Skip,
        LoadRewards = ReplicatedStorage.packages.Net.RE.TimeMission.LoadRewards,
        RequestChallengeUI = ReplicatedStorage.packages.Net.RE.TimeMission.RequestChallengeUI,
        SpinReward = ReplicatedStorage.packages.Net.RE.TimeMission.SpinReward
    },
    
    -- Reputation Quest System
    ReputationQuests = {
        ClaimQuest = ReplicatedStorage.packages.Net.RE.ReputationQuests.ClaimQuest,
        Reload = ReplicatedStorage.packages.Net.RE.ReputationQuests.Reload,
        SelectQuest = ReplicatedStorage.packages.Net.RE.ReputationQuests.SelectQuest,
        AskToRefreshQuests = ReplicatedStorage.packages.Net.RE.ReputationQuests.AskToRefreshQuests
    },
    
    -- Limited Quest Service
    LimitedQuests = {
        RequestRefresh = ReplicatedStorage.packages.Net.RE.LimitedQuestsService.RequestRefresh,
        GetEventTime = ReplicatedStorage.packages.Net.RF.LimitedQuestsService.GetEventTime,
        GetRefreshTime = ReplicatedStorage.packages.Net.RF.LimitedQuestsService.GetRefreshTime
    },
    
    -- Friends Quest System
    FriendsQuest = {
        ToggleUI = ReplicatedStorage.packages.Net.RE.FriendsQuestService.ToggleFriendsQuestUI,
        UpdateQuest = ReplicatedStorage.packages.Net.RE.FriendsQuestService.UpdateQuest,
        Invite = ReplicatedStorage.packages.Net.RE.FriendsQuestService.Invite,
        AcceptInvite = ReplicatedStorage.packages.Net.RE.FriendsQuestService.AcceptInvite,
        Spin = ReplicatedStorage.packages.Net.RF.FriendsQuestService.Spin
    },
    
    -- Quest Tracking
    Quests = {
        ToggleTrack = ReplicatedStorage.packages.Net.RE.Quests.ToggleTrack
    },
    
    -- NPC Quest Systems
    NPCs = {
        Pierre = {
            GiveQuest = Workspace.world.npcs.Pierre.pierre.giveQuest,
            GiveAdvice = Workspace.world.npcs.Pierre.pierre.giveAdvice
        },
        Phineas = {
            GiveQuest = Workspace.world.npcs.Phineas.phineas.giveQuest,
            FinishQuest = Workspace.world.npcs.Phineas.phineas.finishQuest
        },
        MoosewoodAngler = {
            GiveQuest = Workspace.world.npcs["Moosewood Angler"].angler.giveQuest,
            QuestCompleted = Workspace.world.npcs["Moosewood Angler"].angler.questCompleted
        }
    },
    
    -- Reputation Service
    Reputation = {
        GetRank = ReplicatedStorage.packages.Net.RF.ReputationService.GetRank
    },
    
    -- Daily Reward System
    DailyReward = {
        Show = ReplicatedStorage.packages.Net.RE.DailyReward.Show,
        Claim = ReplicatedStorage.packages.Net.RE.DailyReward.Claim
    }
}

--// Data Storage
QuestExploits.Data = {
    ActiveQuests = {},
    CompletedQuests = {},
    AvailableQuests = {},
    QuestHistory = {},
    ReputationLevels = {},
    Rewards = {},
    QuestObjectives = {},
    NPCInteractions = {}
}

--// Configuration
QuestExploits.Config = {
    AutoQuestCompleter = false,
    MissionSkipExploit = false,
    ReputationBooster = false,
    AutoRewardClaimer = false,
    QuestRequirementBypasser = false,
    CompletionDelay = 1,
    ClaimDelay = 0.5,
    SkipDelay = 0.1,
    MaxQuestsPerSession = 50,
    AutoRefreshQuests = true,
    AutoAcceptQuests = true,
    LogActivity = true
}

--// Quest Types
QuestExploits.QuestTypes = {
    Fishing = {
        objectives = {"catch_fish", "catch_rare_fish", "fish_in_zone"},
        rewards = {"xp", "coins", "bait", "rod"}
    },
    Collection = {
        objectives = {"collect_items", "find_treasure", "gather_resources"},
        rewards = {"xp", "coins", "gems", "equipment"}
    },
    Exploration = {
        objectives = {"visit_location", "discover_area", "travel_distance"},
        rewards = {"xp", "coins", "titles", "boats"}
    },
    Combat = {
        objectives = {"defeat_enemies", "survive_time", "use_abilities"},
        rewards = {"xp", "coins", "weapons", "armor"}
    },
    Social = {
        objectives = {"interact_npcs", "help_players", "join_events"},
        rewards = {"xp", "coins", "reputation", "friends"}
    }
}

--// Helper Functions
local function safeFireRemote(remote, ...)
    local success, result = pcall(function()
        return remote:FireServer(...)
    end)
    if not success then
        warn("Failed to fire remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function safeInvokeRemote(remote, ...)
    local success, result = pcall(function()
        return remote:InvokeServer(...)
    end)
    if not success then
        warn("Failed to invoke remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function logActivity(activity, details)
    if not QuestExploits.Config.LogActivity then return end
    local timestamp = os.date("%H:%M:%S")
    print(string.format("[%s] QUEST: %s - %s", timestamp, activity, details or ""))
end

local function getPlayerLevel()
    -- This would need to be implemented based on game's level system
    return 50 -- Default level
end

local function getPlayerReputation()
    if QuestExploits.RemoteEvents.Reputation.GetRank then
        local success, rank = safeInvokeRemote(QuestExploits.RemoteEvents.Reputation.GetRank)
        return success and rank or 1
    end
    return 1
end

--// 1. AUTO QUEST COMPLETER
function QuestExploits:StartAutoQuestCompleter()
    if self.Config.AutoQuestCompleter then return end
    self.Config.AutoQuestCompleter = true
    logActivity("COMPLETER", "Starting Auto Quest Completer")
    
    spawn(function()
        while self.Config.AutoQuestCompleter do
            self:ProcessActiveQuests()
            self:SearchForNewQuests()
            self:AutoCompleteQuests()
            wait(self.Config.CompletionDelay)
        end
    end)
end

function QuestExploits:StopAutoQuestCompleter()
    self.Config.AutoQuestCompleter = false
    logActivity("COMPLETER", "Stopping Auto Quest Completer")
end

function QuestExploits:ProcessActiveQuests()
    -- Scan for active quests in UI
    local questUI = lp.PlayerGui:FindFirstChild("QuestUI") or lp.PlayerGui:FindFirstChild("quests")
    if not questUI then return end
    
    for _, questFrame in pairs(questUI:GetDescendants()) do
        if questFrame:IsA("Frame") and questFrame.Name:find("Quest") then
            local questData = self:ExtractQuestData(questFrame)
            if questData then
                self:ProcessQuest(questData)
            end
        end
    end
end

function QuestExploits:ExtractQuestData(questFrame)
    local questData = {
        name = "Unknown Quest",
        objectives = {},
        progress = 0,
        maxProgress = 100,
        completed = false,
        questId = nil
    }
    
    -- Extract quest information from UI elements
    for _, child in pairs(questFrame:GetDescendants()) do
        if child:IsA("TextLabel") then
            local text = child.Text:lower()
            
            if text:find("catch") and text:find("fish") then
                questData.type = "Fishing"
                questData.objectives = {"catch_fish"}
            elseif text:find("collect") or text:find("gather") then
                questData.type = "Collection"
                questData.objectives = {"collect_items"}
            elseif text:find("visit") or text:find("go to") then
                questData.type = "Exploration"
                questData.objectives = {"visit_location"}
            end
            
            -- Extract progress
            local progress = child.Text:match("(%d+)/(%d+)")
            if progress then
                local current, max = progress:match("(%d+)/(%d+)")
                questData.progress = tonumber(current) or 0
                questData.maxProgress = tonumber(max) or 100
                questData.completed = questData.progress >= questData.maxProgress
            end
        end
    end
    
    return questData
end

function QuestExploits:ProcessQuest(questData)
    if questData.completed then
        self:CompleteQuest(questData)
    else
        self:AutoProgressQuest(questData)
    end
end

function QuestExploits:AutoProgressQuest(questData)
    if questData.type == "Fishing" then
        self:AutoFishingProgress(questData)
    elseif questData.type == "Collection" then
        self:AutoCollectionProgress(questData)
    elseif questData.type == "Exploration" then
        self:AutoExplorationProgress(questData)
    end
end

function QuestExploits:AutoFishingProgress(questData)
    -- Trigger fishing actions
    local character = lp.Character
    if character then
        local rod = character:FindFirstChildOfClass("Tool")
        if rod and rod:FindFirstChild("events") then
            safeFireRemote(rod.events.cast, 100, 1)
            wait(2)
            safeFireRemote(ReplicatedStorage.events.reelfinished, 100, true)
        end
    end
end

function QuestExploits:AutoCollectionProgress(questData)
    -- Auto-collect nearby items
    local character = lp.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local playerPos = character.HumanoidRootPart.Position
    
    for _, item in pairs(Workspace:GetDescendants()) do
        if item:IsA("BasePart") and item.Name:lower():find("collectible") then
            local distance = (item.Position - playerPos).Magnitude
            if distance <= 50 then
                -- Teleport to item or fire collection event
                character.HumanoidRootPart.CFrame = item.CFrame
                wait(0.1)
            end
        end
    end
end

function QuestExploits:AutoExplorationProgress(questData)
    -- Auto-travel to quest locations
    local questLocations = {
        "Moosewood", "Roslit Bay", "Ancient Isle", "Depths", "Northern Summit"
    }
    
    for _, location in pairs(questLocations) do
        if questData.name:lower():find(location:lower()) then
            self:TeleportToLocation(location)
            break
        end
    end
end

function QuestExploits:TeleportToLocation(locationName)
    local locations = {
        ["Moosewood"] = CFrame.new(379, 134, 233),
        ["Roslit Bay"] = CFrame.new(-1472, 132, 707),
        ["Ancient Isle"] = CFrame.new(6056, 195, 276),
        ["Depths"] = CFrame.new(491, -706, 1230),
        ["Northern Summit"] = CFrame.new(19608, 131, 5222)
    }
    
    local destination = locations[locationName]
    if destination and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        lp.Character.HumanoidRootPart.CFrame = destination
        logActivity("TRAVEL", "Teleported to " .. locationName .. " for quest")
    end
end

function QuestExploits:CompleteQuest(questData)
    logActivity("COMPLETE", "Auto-completing quest: " .. questData.name)
    
    -- Try multiple completion methods
    local completionMethods = {
        function() self:CompleteViaReputationSystem(questData) end,
        function() self:CompleteViaNPC(questData) end,
        function() self:CompleteViaTimeMission(questData) end,
        function() self:CompleteViaUI(questData) end
    }
    
    for _, method in pairs(completionMethods) do
        local success = pcall(method)
        if success then
            logActivity("COMPLETE", "Quest completed successfully")
            table.insert(self.Data.CompletedQuests, questData)
            break
        end
        wait(0.1)
    end
end

function QuestExploits:CompleteViaReputationSystem(questData)
    if self.RemoteEvents.ReputationQuests.ClaimQuest then
        return safeFireRemote(self.RemoteEvents.ReputationQuests.ClaimQuest, questData.questId or questData.name)
    end
end

function QuestExploits:CompleteViaNPC(questData)
    -- Try completing via NPCs
    for npcName, npc in pairs(self.RemoteEvents.NPCs) do
        if npc.FinishQuest then
            local success = safeInvokeRemote(npc.FinishQuest, questData.questId or questData.name)
            if success then return true end
        elseif npc.QuestCompleted then
            local success = safeInvokeRemote(npc.QuestCompleted, questData.questId or questData.name)
            if success then return true end
        end
    end
end

function QuestExploits:CompleteViaTimeMission(questData)
    if self.RemoteEvents.TimeMission.ClaimReward then
        return safeFireRemote(self.RemoteEvents.TimeMission.ClaimReward, questData.questId or questData.name)
    end
end

function QuestExploits:CompleteViaUI(questData)
    -- Try clicking completion button in UI
    local questUI = lp.PlayerGui:FindFirstChild("QuestUI")
    if questUI then
        for _, button in pairs(questUI:GetDescendants()) do
            if button:IsA("TextButton") and (button.Text:lower():find("complete") or button.Text:lower():find("claim")) then
                button.Activated:Fire()
                return true
            end
        end
    end
end

function QuestExploits:SearchForNewQuests()
    if not self.Config.AutoAcceptQuests then return end
    
    -- Refresh quest lists
    if self.RemoteEvents.ReputationQuests.Reload then
        safeFireRemote(self.RemoteEvents.ReputationQuests.Reload)
    end
    
    if self.RemoteEvents.LimitedQuests.RequestRefresh then
        safeFireRemote(self.RemoteEvents.LimitedQuests.RequestRefresh)
    end
    
    -- Auto-accept available quests
    self:AutoAcceptQuests()
end

function QuestExploits:AutoAcceptQuests()
    -- Try accepting quests from NPCs
    for npcName, npc in pairs(self.RemoteEvents.NPCs) do
        if npc.GiveQuest then
            safeInvokeRemote(npc.GiveQuest)
            logActivity("ACCEPT", "Accepted quest from " .. npcName)
            wait(0.5)
        end
    end
    
    -- Accept quests via reputation system
    if self.RemoteEvents.ReputationQuests.SelectQuest then
        for i = 1, 10 do -- Try accepting multiple quests
            safeFireRemote(self.RemoteEvents.ReputationQuests.SelectQuest, i)
            wait(0.2)
        end
    end
end

--// 2. MISSION SKIP EXPLOIT
function QuestExploits:StartMissionSkipExploit()
    if self.Config.MissionSkipExploit then return end
    self.Config.MissionSkipExploit = true
    logActivity("SKIP", "Starting Mission Skip Exploit")
    
    spawn(function()
        while self.Config.MissionSkipExploit do
            self:SkipActiveMissions()
            wait(self.Config.SkipDelay)
        end
    end)
end

function QuestExploits:StopMissionSkipExploit()
    self.Config.MissionSkipExploit = false
    logActivity("SKIP", "Stopping Mission Skip Exploit")
end

function QuestExploits:SkipActiveMissions()
    -- Skip time missions
    if self.RemoteEvents.TimeMission.Skip then
        for i = 1, 10 do
            safeFireRemote(self.RemoteEvents.TimeMission.Skip, i)
        end
    end
    
    -- Skip other mission types
    self:SkipCustomMissions()
end

function QuestExploits:SkipCustomMissions()
    local skipTargets = {
        "fishing_mission", "collection_mission", "exploration_mission",
        "daily_challenge", "weekly_quest", "special_event"
    }
    
    for _, target in pairs(skipTargets) do
        -- Try various skip methods
        self:AttemptMissionSkip(target)
    end
end

function QuestExploits:AttemptMissionSkip(missionId)
    local skipMethods = {
        function() return safeFireRemote(self.RemoteEvents.TimeMission.Skip, missionId) end,
        function() return self:ForceCompleteState(missionId) end,
        function() return self:BypassRequirements(missionId) end
    }
    
    for _, method in pairs(skipMethods) do
        local success = method()
        if success then
            logActivity("SKIP", "Skipped mission: " .. missionId)
            break
        end
    end
end

function QuestExploits:ForceCompleteState(missionId)
    -- Try to force mission completion state
    local completionEvents = {
        self.RemoteEvents.TimeMission.ClaimReward,
        self.RemoteEvents.ReputationQuests.ClaimQuest
    }
    
    for _, event in pairs(completionEvents) do
        if event then
            local success = safeFireRemote(event, missionId, true) -- Force completion
            if success then return true end
        end
    end
    
    return false
end

--// 3. REPUTATION BOOSTER
function QuestExploits:StartReputationBooster()
    if self.Config.ReputationBooster then return end
    self.Config.ReputationBooster = true
    logActivity("REPUTATION", "Starting Reputation Booster")
    
    spawn(function()
        while self.Config.ReputationBooster do
            self:BoostReputation()
            wait(2)
        end
    end)
end

function QuestExploits:StopReputationBooster()
    self.Config.ReputationBooster = false
    logActivity("REPUTATION", "Stopping Reputation Booster")
end

function QuestExploits:BoostReputation()
    -- Method 1: Complete reputation quests rapidly
    self:RapidReputationQuests()
    
    -- Method 2: Interact with NPCs for reputation
    self:NPCReputationFarming()
    
    -- Method 3: Manipulate reputation values
    self:DirectReputationManipulation()
end

function QuestExploits:RapidReputationQuests()
    if self.RemoteEvents.ReputationQuests.AskToRefreshQuests then
        safeFireRemote(self.RemoteEvents.ReputationQuests.AskToRefreshQuests)
    end
    
    -- Rapidly claim reputation quests
    for i = 1, 20 do
        if self.RemoteEvents.ReputationQuests.ClaimQuest then
            safeFireRemote(self.RemoteEvents.ReputationQuests.ClaimQuest, i)
        end
        wait(0.1)
    end
end

function QuestExploits:NPCReputationFarming()
    -- Interact with reputation-giving NPCs
    for npcName, npc in pairs(self.RemoteEvents.NPCs) do
        if npc.GiveAdvice then
            safeInvokeRemote(npc.GiveAdvice) -- This might give reputation
        end
        wait(0.2)
    end
end

function QuestExploits:DirectReputationManipulation()
    -- Try to directly modify reputation
    local reputationLevels = {1000, 2000, 5000, 10000, 25000, 50000, 100000}
    
    for _, level in pairs(reputationLevels) do
        -- Try various reputation modification methods
        local methods = {
            function() return self:SetReputationLevel(level) end,
            function() return self:AddReputationPoints(level) end,
            function() return self:UnlockReputationRank(level) end
        }
        
        for _, method in pairs(methods) do
            pcall(method)
        end
    end
end

function QuestExploits:SetReputationLevel(level)
    -- This would need to be implemented based on game's reputation system
    local character = lp.Character
    if character then
        character:SetAttribute("Reputation", level)
        character:SetAttribute("ReputationLevel", level)
    end
end

function QuestExploits:AddReputationPoints(points)
    if self.RemoteEvents.Reputation.GetRank then
        -- Try to manipulate reputation through rank system
        safeInvokeRemote(self.RemoteEvents.Reputation.GetRank, points)
    end
end

function QuestExploits:UnlockReputationRank(rank)
    -- Try to unlock specific reputation ranks
    local rankNames = {"Novice", "Apprentice", "Expert", "Master", "Grandmaster", "Legend"}
    
    for _, rankName in pairs(rankNames) do
        -- Attempt to unlock rank
        pcall(function()
            local character = lp.Character
            if character then
                character:SetAttribute("ReputationRank", rankName)
                character:SetAttribute("Rank", rankName)
            end
        end)
    end
end

--// 4. AUTO REWARD CLAIMER
function QuestExploits:StartAutoRewardClaimer()
    if self.Config.AutoRewardClaimer then return end
    self.Config.AutoRewardClaimer = true
    logActivity("CLAIMER", "Starting Auto Reward Claimer")
    
    spawn(function()
        while self.Config.AutoRewardClaimer do
            self:ClaimAllAvailableRewards()
            wait(self.Config.ClaimDelay)
        end
    end)
end

function QuestExploits:StopAutoRewardClaimer()
    self.Config.AutoRewardClaimer = false
    logActivity("CLAIMER", "Stopping Auto Reward Claimer")
end

function QuestExploits:ClaimAllAvailableRewards()
    -- Claim time mission rewards
    self:ClaimTimeMissionRewards()
    
    -- Claim daily rewards
    self:ClaimDailyRewards()
    
    -- Claim quest rewards
    self:ClaimQuestRewards()
    
    -- Claim friend quest rewards
    self:ClaimFriendQuestRewards()
end

function QuestExploits:ClaimTimeMissionRewards()
    if self.RemoteEvents.TimeMission.ClaimReward then
        for i = 1, 50 do
            safeFireRemote(self.RemoteEvents.TimeMission.ClaimReward, i)
        end
    end
    
    if self.RemoteEvents.TimeMission.SpinReward then
        for i = 1, 20 do
            safeFireRemote(self.RemoteEvents.TimeMission.SpinReward, i)
        end
    end
end

function QuestExploits:ClaimDailyRewards()
    if self.RemoteEvents.DailyReward.Show then
        safeFireRemote(self.RemoteEvents.DailyReward.Show)
        wait(0.1)
    end
    
    if self.RemoteEvents.DailyReward.Claim then
        for i = 1, 30 do -- Try claiming 30 days worth
            safeFireRemote(self.RemoteEvents.DailyReward.Claim, i)
        end
    end
end

function QuestExploits:ClaimQuestRewards()
    if self.RemoteEvents.ReputationQuests.ClaimQuest then
        for i = 1, 100 do
            safeFireRemote(self.RemoteEvents.ReputationQuests.ClaimQuest, i)
        end
    end
end

function QuestExploits:ClaimFriendQuestRewards()
    if self.RemoteEvents.FriendsQuest.Spin then
        for i = 1, 10 do
            safeInvokeRemote(self.RemoteEvents.FriendsQuest.Spin, i)
        end
    end
end

--// 5. QUEST REQUIREMENT BYPASSER
function QuestExploits:StartQuestRequirementBypasser()
    if self.Config.QuestRequirementBypasser then return end
    self.Config.QuestRequirementBypasser = true
    logActivity("BYPASSER", "Starting Quest Requirement Bypasser")
    
    spawn(function()
        while self.Config.QuestRequirementBypasser do
            self:BypassQuestRequirements()
            wait(3)
        end
    end)
end

function QuestExploits:StopQuestRequirementBypasser()
    self.Config.QuestRequirementBypasser = false
    logActivity("BYPASSER", "Stopping Quest Requirement Bypasser")
end

function QuestExploits:BypassQuestRequirements()
    -- Bypass level requirements
    self:BypassLevelRequirements()
    
    -- Bypass item requirements
    self:BypassItemRequirements()
    
    -- Bypass location requirements
    self:BypassLocationRequirements()
    
    -- Bypass prerequisite requirements
    self:BypassPrerequisiteRequirements()
end

function QuestExploits:BypassLevelRequirements()
    local character = lp.Character
    if character then
        -- Set high level temporarily
        character:SetAttribute("Level", 999)
        character:SetAttribute("Experience", 999999)
        character:SetAttribute("QuestLevel", 999)
    end
end

function QuestExploits:BypassItemRequirements()
    -- Temporarily add required items to inventory
    local requiredItems = {
        "Rod", "Bait", "Bobber", "Lantern", "Boat", "Key", "Crystal", "Gem"
    }
    
    for _, itemType in pairs(requiredItems) do
        self:TemporarilyAddItem(itemType)
    end
end

function QuestExploits:TemporarilyAddItem(itemType)
    local character = lp.Character
    if character then
        character:SetAttribute("Has" .. itemType, true)
        character:SetAttribute(itemType .. "Count", 999)
    end
end

function QuestExploits:BypassLocationRequirements()
    -- Set location flags to indicate presence in all areas
    local locations = {
        "Moosewood", "RoslitBay", "AncientIsle", "Depths", "NorthernSummit",
        "ForsakenShores", "MushroveSwamp", "TerrapinIsland", "SnowcapIsland"
    }
    
    local character = lp.Character
    if character then
        for _, location in pairs(locations) do
            character:SetAttribute("Visited" .. location, true)
            character:SetAttribute("UnlockedArea" .. location, true)
        end
    end
end

function QuestExploits:BypassPrerequisiteRequirements()
    local character = lp.Character
    if character then
        -- Mark all potential prerequisites as completed
        for i = 1, 100 do
            character:SetAttribute("CompletedQuest" .. i, true)
            character:SetAttribute("UnlockedQuest" .. i, true)
        end
    end
end

function QuestExploits:BypassRequirements(questId)
    -- Specific bypass for individual quest
    logActivity("BYPASS", "Bypassing requirements for quest: " .. tostring(questId))
    
    local character = lp.Character
    if character then
        character:SetAttribute("QuestRequirementMet_" .. tostring(questId), true)
        character:SetAttribute("CanAcceptQuest_" .. tostring(questId), true)
        character:SetAttribute("QuestUnlocked_" .. tostring(questId), true)
    end
    
    return true
end

--// UTILITY FUNCTIONS
function QuestExploits:GetQuestProgress()
    local progress = {
        activeQuests = #self.Data.ActiveQuests,
        completedQuests = #self.Data.CompletedQuests,
        totalRewards = #self.Data.Rewards,
        currentReputation = getPlayerReputation(),
        currentLevel = getPlayerLevel()
    }
    
    return progress
end

function QuestExploits:PrintQuestStatus()
    local status = self:GetQuestProgress()
    
    print("\n🏆 QUEST SYSTEM STATUS")
    print("═══════════════════════")
    print("📋 Active Quests: " .. status.activeQuests)
    print("✅ Completed Quests: " .. status.completedQuests) 
    print("🎁 Total Rewards: " .. status.totalRewards)
    print("⭐ Reputation: " .. status.currentReputation)
    print("📊 Level: " .. status.currentLevel)
    
    print("\n🔄 SYSTEM STATUS:")
    print("├─ Auto Quest Completer: " .. (self.Config.AutoQuestCompleter and "🟢 ON" or "🔴 OFF"))
    print("├─ Mission Skip Exploit: " .. (self.Config.MissionSkipExploit and "🟢 ON" or "🔴 OFF"))
    print("├─ Reputation Booster: " .. (self.Config.ReputationBooster and "🟢 ON" or "🔴 OFF"))
    print("├─ Auto Reward Claimer: " .. (self.Config.AutoRewardClaimer and "🟢 ON" or "🔴 OFF"))
    print("└─ Requirement Bypasser: " .. (self.Config.QuestRequirementBypasser and "🟢 ON" or "🔴 OFF"))
end

--// CONTROL FUNCTIONS
function QuestExploits:StartAllSystems()
    self:StartAutoQuestCompleter()
    self:StartMissionSkipExploit()
    self:StartReputationBooster()
    self:StartAutoRewardClaimer()
    self:StartQuestRequirementBypasser()
    logActivity("SYSTEM", "All quest exploit systems started")
end

function QuestExploits:StopAllSystems()
    self:StopAutoQuestCompleter()
    self:StopMissionSkipExploit()
    self:StopReputationBooster()
    self:StopAutoRewardClaimer()
    self:StopQuestRequirementBypasser()
    logActivity("SYSTEM", "All quest exploit systems stopped")
end

function QuestExploits:GetStatus()
    return {
        AutoQuestCompleter = self.Config.AutoQuestCompleter,
        MissionSkipExploit = self.Config.MissionSkipExploit,
        ReputationBooster = self.Config.ReputationBooster,
        AutoRewardClaimer = self.Config.AutoRewardClaimer,
        QuestRequirementBypasser = self.Config.QuestRequirementBypasser,
        ActiveQuests = #self.Data.ActiveQuests,
        CompletedQuests = #self.Data.CompletedQuests,
        ClaimedRewards = #self.Data.Rewards
    }
end

--// EMERGENCY FUNCTIONS
function QuestExploits:EmergencyStop()
    self:StopAllSystems()
    logActivity("EMERGENCY", "Emergency stop activated - all quest systems halted")
end

--// INITIALIZE
function QuestExploits:Initialize()
    logActivity("INIT", "Quest & Mission Exploits Module Initialized")
    logActivity("INIT", "Available Features: Auto Quest Completer, Mission Skip, Reputation Booster, Auto Reward Claimer, Requirement Bypasser")
end

return QuestExploits
