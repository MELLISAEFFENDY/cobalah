--// Advanced Fishing Automation Exploits Module
--// Based on Remote Events Analysis from fdump.txt
--// Created: September 3, 2025

local Players = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService('Workspace'))
local TweenService = cloneref(game:GetService('TweenService'))

local lp = Players.LocalPlayer
local FishingExploits = {}

--// Remote Events Storage (Based on fdump.txt)
FishingExploits.RemoteEvents = {
    -- Rod Resources Events
    RodResources = {
        Cast = ReplicatedStorage.shared.modules.fishing.rodresources.events.cast,
        Reset = ReplicatedStorage.shared.modules.fishing.rodresources.events.reset,
        BreakBobber = ReplicatedStorage.shared.modules.fishing.rodresources.events.breakbobber,
        HandleBobber = ReplicatedStorage.shared.modules.fishing.rodresources.events.handlebobber,
        CatchFinish = ReplicatedStorage.shared.modules.fishing.rodresources.events.catchfinish
    },
    
    -- Rod Management
    Rod = {
        Changed = ReplicatedStorage.packages.Net.RE.RodChanged,
        ChangeRodSkin = ReplicatedStorage.packages.Net.RE.ChangeRodSkin,
        Equip = ReplicatedStorage.packages.Net.RE.Rod.Equip,
        Favorite = ReplicatedStorage.packages.Net.RF.Rod.Favorite
    },
    
    -- Equipment Management
    Equipment = {
        Bait = ReplicatedStorage.packages.Net.RE.Bait.Equip,
        Bobber = ReplicatedStorage.packages.Net.RE.Bobber.Equip
    },
    
    -- Fishing UI Events
    FishingUI = {
        ShakeUI = ReplicatedStorage.resources.replicated.fishing.shakeui.safezone.shakeui.button.shake,
        Cancel = ReplicatedStorage.resources.replicated.fishing.shakeui.cancel
    },
    
    -- Game Events
    Events = {
        AnnoCatch = ReplicatedStorage.events.anno_catch,
        ReelFinished = ReplicatedStorage.events.reelfinished
    }
}

--// Data Storage
FishingExploits.Data = {
    FishDatabase = {},
    RodDatabase = {},
    BaitDatabase = {},
    CatchHistory = {},
    OptimalSettings = {},
    FishRarities = {},
    ZoneConditions = {},
    AIDecisions = {}
}

--// Configuration
FishingExploits.Config = {
    PerfectFishAI = false,
    MultiRodCasting = false,
    AutoRodChanger = false,
    FishRarityDetector = false,
    AutoBaitOptimizer = false,
    MaxSimultaneousRods = 5,
    CastDelay = 0.5,
    RodChangeDelay = 1,
    BaitChangeDelay = 0.5,
    RarityThreshold = "epic", -- minimum rarity to catch
    AILearningMode = true,
    LogActivity = true
}

--// Fish Rarity System
FishingExploits.FishRarities = {
    common = 1,
    uncommon = 2,
    rare = 3,
    epic = 4,
    legendary = 5,
    mythic = 6,
    divine = 7,
    celestial = 8,
    abyssal = 9,
    ancient = 10
}

--// Zone Optimal Settings
FishingExploits.ZoneSettings = {
    ["Moosewood"] = {
        optimalRod = "Flimsy Rod",
        bestBait = "Worm",
        targetFish = {"Bass", "Carp", "Trout"}
    },
    ["Roslit Bay"] = {
        optimalRod = "Plastic Rod",
        bestBait = "Shrimp",
        targetFish = {"Salmon", "Tuna", "Mackerel"}
    },
    ["Ancient Isle"] = {
        optimalRod = "Ancient Rod",
        bestBait = "Enchanted Bait",
        targetFish = {"Ancient Fish", "Relic Fish", "Fossil Fish"}
    },
    ["Depths"] = {
        optimalRod = "Abyssal Rod",
        bestBait = "Deep Sea Bait",
        targetFish = {"Abyssal Fish", "Deep Sea Leviathan", "Void Fish"}
    },
    ["Northern Summit"] = {
        optimalRod = "Summit Rod",
        bestBait = "Frozen Bait",
        targetFish = {"Frost Fish", "Ice Fish", "Glacier Fish"}
    }
}

--// Helper Functions
local function safeFireRemote(remote, ...)
    local success, result = pcall(function()
        return remote:FireServer(...)
    end)
    if not success then
        warn("Failed to fire remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function logActivity(activity, details)
    if not FishingExploits.Config.LogActivity then return end
    local timestamp = os.date("%H:%M:%S")
    print(string.format("[%s] FISHING: %s - %s", timestamp, activity, details or ""))
end

local function getCurrentZone()
    local character = lp.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return "Unknown" end
    
    local position = character.HumanoidRootPart.Position
    
    -- Zone detection based on position
    local zones = {
        {name = "Moosewood", center = Vector3.new(379, 134, 233), radius = 500},
        {name = "Roslit Bay", center = Vector3.new(-1472, 132, 707), radius = 500},
        {name = "Ancient Isle", center = Vector3.new(6056, 195, 276), radius = 500},
        {name = "Depths", center = Vector3.new(491, -706, 1230), radius = 500},
        {name = "Northern Summit", center = Vector3.new(19608, 131, 5222), radius = 500}
    }
    
    for _, zone in pairs(zones) do
        local distance = (position - zone.center).Magnitude
        if distance <= zone.radius then
            return zone.name
        end
    end
    
    return "Unknown"
end

local function getEquippedRod()
    local character = lp.Character
    if character then
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA("Tool") and tool:FindFirstChild("values") then
                return tool
            end
        end
    end
    return nil
end

local function getRodRating(rodName)
    local ratings = {
        ["Heaven Rod"] = 100,
        ["Kings Rod"] = 95,
        ["Summit Rod"] = 90,
        ["Ancient Rod"] = 85,
        ["Abyssal Rod"] = 85,
        ["Divine Rod"] = 80,
        ["Mythic Rod"] = 75,
        ["Legendary Rod"] = 70,
        ["Epic Rod"] = 60,
        ["Rare Rod"] = 50,
        ["Plastic Rod"] = 30,
        ["Flimsy Rod"] = 20
    }
    return ratings[rodName] or 25
end

--// 1. PERFECT FISH AI
function FishingExploits:StartPerfectFishAI()
    if self.Config.PerfectFishAI then return end
    self.Config.PerfectFishAI = true
    logActivity("AI", "Starting Perfect Fish AI")
    
    spawn(function()
        while self.Config.PerfectFishAI do
            self:RunFishingAI()
            wait(1)
        end
    end)
end

function FishingExploits:StopPerfectFishAI()
    self.Config.PerfectFishAI = false
    logActivity("AI", "Stopping Perfect Fish AI")
end

function FishingExploits:RunFishingAI()
    local currentZone = getCurrentZone()
    local rod = getEquippedRod()
    
    if not rod then
        self:AISelectOptimalRod(currentZone)
        return
    end
    
    -- AI Decision Making
    local decision = self:MakeAIDecision(currentZone, rod)
    self:ExecuteAIDecision(decision)
    
    -- Learn from results
    if self.Config.AILearningMode then
        self:UpdateAIKnowledge(decision)
    end
end

function FishingExploits:MakeAIDecision(zone, rod)
    local zoneSettings = self.ZoneSettings[zone]
    local decision = {
        action = "wait",
        confidence = 0,
        reasoning = ""
    }
    
    -- Check if we should cast
    if rod and rod.values.lure.Value <= 0.001 then
        local castPower = self:CalculateOptimalCastPower(zone)
        decision = {
            action = "cast",
            power = castPower,
            confidence = 0.9,
            reasoning = "Rod ready for casting with optimal power"
        }
    end
    
    -- Check if we should reel
    if rod and rod.values.lure.Value >= 99 then
        decision = {
            action = "reel",
            confidence = 1.0,
            reasoning = "Fish caught, ready to reel"
        }
    end
    
    -- Check if we should change rod
    if zoneSettings and rod.Name ~= zoneSettings.optimalRod then
        local currentRating = getRodRating(rod.Name)
        local optimalRating = getRodRating(zoneSettings.optimalRod)
        
        if optimalRating > currentRating then
            decision = {
                action = "changeRod",
                newRod = zoneSettings.optimalRod,
                confidence = 0.8,
                reasoning = "Better rod available for this zone"
            }
        end
    end
    
    return decision
end

function FishingExploits:ExecuteAIDecision(decision)
    if decision.confidence < 0.5 then return end
    
    logActivity("AI", "Executing: " .. decision.action .. " (" .. decision.reasoning .. ")")
    
    if decision.action == "cast" then
        self:PerfectCast(decision.power or 100)
    elseif decision.action == "reel" then
        self:PerfectReel()
    elseif decision.action == "changeRod" then
        self:ChangeToRod(decision.newRod)
    end
    
    -- Store decision for learning
    table.insert(self.Data.AIDecisions, decision)
end

function FishingExploits:CalculateOptimalCastPower(zone)
    local zoneMultipliers = {
        ["Moosewood"] = 0.7,
        ["Roslit Bay"] = 0.8,
        ["Ancient Isle"] = 1.0,
        ["Depths"] = 1.2,
        ["Northern Summit"] = 1.1
    }
    
    local basepower = 85
    local multiplier = zoneMultipliers[zone] or 1.0
    return math.min(100, basepower * multiplier)
end

function FishingExploits:PerfectCast(power)
    power = power or 100
    local rod = getEquippedRod()
    
    if rod and self.RemoteEvents.RodResources.Cast then
        safeFireRemote(self.RemoteEvents.RodResources.Cast, power, 1)
        logActivity("CAST", "Perfect cast with power: " .. power)
    end
end

function FishingExploits:PerfectReel()
    if self.RemoteEvents.Events.ReelFinished then
        safeFireRemote(self.RemoteEvents.Events.ReelFinished, 100, true)
        logActivity("REEL", "Perfect reel executed")
    end
end

--// 2. MULTI-ROD CASTING
function FishingExploits:StartMultiRodCasting()
    if self.Config.MultiRodCasting then return end
    self.Config.MultiRodCasting = true
    logActivity("MULTI", "Starting Multi-Rod Casting")
    
    spawn(function()
        while self.Config.MultiRodCasting do
            self:ExecuteMultiRodCasting()
            wait(self.Config.CastDelay)
        end
    end)
end

function FishingExploits:StopMultiRodCasting()
    self.Config.MultiRodCasting = false
    logActivity("MULTI", "Stopping Multi-Rod Casting")
end

function FishingExploits:ExecuteMultiRodCasting()
    local availableRods = self:GetAvailableRods()
    local rodsToUse = math.min(#availableRods, self.Config.MaxSimultaneousRods)
    
    for i = 1, rodsToUse do
        local rod = availableRods[i]
        if rod then
            self:CastWithSpecificRod(rod)
            wait(0.1) -- Small delay between casts
        end
    end
end

function FishingExploits:GetAvailableRods()
    local rods = {}
    local backpack = lp.Backpack
    
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and item:FindFirstChild("values") and string.find(item.Name:lower(), "rod") then
            table.insert(rods, item)
        end
    end
    
    return rods
end

function FishingExploits:CastWithSpecificRod(rod)
    if not rod or not rod:FindFirstChild("events") then return end
    
    local castEvent = rod.events:FindFirstChild("cast")
    if castEvent then
        safeFireRemote(castEvent, 100, 1)
        logActivity("MULTI", "Cast with " .. rod.Name)
    end
end

--// 3. AUTO ROD CHANGER
function FishingExploits:StartAutoRodChanger()
    if self.Config.AutoRodChanger then return end
    self.Config.AutoRodChanger = true
    logActivity("CHANGER", "Starting Auto Rod Changer")
    
    spawn(function()
        while self.Config.AutoRodChanger do
            local currentZone = getCurrentZone()
            self:OptimizeRodForZone(currentZone)
            wait(5) -- Check every 5 seconds
        end
    end)
end

function FishingExploits:StopAutoRodChanger()
    self.Config.AutoRodChanger = false
    logActivity("CHANGER", "Stopping Auto Rod Changer")
end

function FishingExploits:OptimizeRodForZone(zone)
    local zoneSettings = self.ZoneSettings[zone]
    if not zoneSettings then return end
    
    local currentRod = getEquippedRod()
    local optimalRod = zoneSettings.optimalRod
    
    if not currentRod or currentRod.Name ~= optimalRod then
        self:ChangeToRod(optimalRod)
    end
end

function FishingExploits:ChangeToRod(rodName)
    local rod = lp.Backpack:FindFirstChild(rodName)
    if not rod then
        logActivity("CHANGER", "Rod not found: " .. rodName)
        return false
    end
    
    -- Unequip current rod
    local currentRod = getEquippedRod()
    if currentRod then
        currentRod.Parent = lp.Backpack
    end
    
    wait(0.1)
    
    -- Equip new rod
    if self.RemoteEvents.Rod.Equip then
        safeFireRemote(self.RemoteEvents.Rod.Equip, rodName)
        logActivity("CHANGER", "Changed to rod: " .. rodName)
        return true
    end
    
    -- Fallback: Manual equip
    rod.Parent = lp.Character
    logActivity("CHANGER", "Manually equipped rod: " .. rodName)
    return true
end

--// 4. FISH RARITY DETECTOR
function FishingExploits:StartFishRarityDetector()
    if self.Config.FishRarityDetector then return end
    self.Config.FishRarityDetector = true
    logActivity("DETECTOR", "Starting Fish Rarity Detector")
    
    -- Hook catch events
    if self.RemoteEvents.Events.AnnoCatch then
        self.RemoteEvents.Events.AnnoCatch.OnClientEvent:Connect(function(fishData)
            self:AnalyzeCaughtFish(fishData)
        end)
    end
    
    spawn(function()
        while self.Config.FishRarityDetector do
            self:ScanForRareFish()
            wait(1)
        end
    end)
end

function FishingExploits:StopFishRarityDetector()
    self.Config.FishRarityDetector = false
    logActivity("DETECTOR", "Stopping Fish Rarity Detector")
end

function FishingExploits:ScanForRareFish()
    local rod = getEquippedRod()
    if not rod or not rod:FindFirstChild("values") then return end
    
    local lureValue = rod.values.lure.Value
    
    -- Detect fish based on lure behavior
    if lureValue > 0 and lureValue < 100 then
        local predictedRarity = self:PredictFishRarity(lureValue, rod)
        
        if predictedRarity then
            local rarityLevel = self.FishRarities[predictedRarity] or 1
            local thresholdLevel = self.FishRarities[self.Config.RarityThreshold] or 1
            
            if rarityLevel >= thresholdLevel then
                logActivity("DETECTOR", "Rare fish detected: " .. predictedRarity)
                self:HandleRareFishDetection(predictedRarity)
            else
                -- Release common fish
                self:ReleaseFish("Too common: " .. predictedRarity)
            end
        end
    end
end

function FishingExploits:PredictFishRarity(lureValue, rod)
    local zone = getCurrentZone()
    local rodRating = getRodRating(rod.Name)
    
    -- Complex prediction algorithm
    local rarityScore = 0
    
    -- Lure value influence
    if lureValue > 90 then
        rarityScore = rarityScore + 30
    elseif lureValue > 70 then
        rarityScore = rarityScore + 20
    elseif lureValue > 50 then
        rarityScore = rarityScore + 10
    end
    
    -- Rod influence
    rarityScore = rarityScore + (rodRating * 0.3)
    
    -- Zone influence
    local zoneMultipliers = {
        ["Ancient Isle"] = 1.5,
        ["Depths"] = 1.4,
        ["Northern Summit"] = 1.3,
        ["Roslit Bay"] = 1.1,
        ["Moosewood"] = 0.8
    }
    
    rarityScore = rarityScore * (zoneMultipliers[zone] or 1.0)
    
    -- Determine rarity
    if rarityScore >= 80 then return "ancient"
    elseif rarityScore >= 70 then return "abyssal"
    elseif rarityScore >= 60 then return "celestial"
    elseif rarityScore >= 50 then return "divine"
    elseif rarityScore >= 40 then return "mythic"
    elseif rarityScore >= 30 then return "legendary"
    elseif rarityScore >= 20 then return "epic"
    elseif rarityScore >= 10 then return "rare"
    else return "common"
    end
end

function FishingExploits:HandleRareFishDetection(rarity)
    -- Optimize reel technique for rare fish
    local rod = getEquippedRod()
    if rod and rod.values.lure.Value >= 99 then
        -- Use perfect technique for rare fish
        self:PerfectReel()
        
        -- Log the catch
        table.insert(self.Data.CatchHistory, {
            rarity = rarity,
            time = os.time(),
            zone = getCurrentZone(),
            rod = rod.Name
        })
    end
end

function FishingExploits:ReleaseFish(reason)
    local rod = getEquippedRod()
    if rod and self.RemoteEvents.RodResources.Reset then
        safeFireRemote(self.RemoteEvents.RodResources.Reset)
        logActivity("RELEASE", reason)
    end
end

function FishingExploits:AnalyzeCaughtFish(fishData)
    if not fishData then return end
    
    -- Store fish data for learning
    self.Data.FishDatabase[fishData.name] = {
        rarity = fishData.rarity,
        zone = getCurrentZone(),
        value = fishData.value,
        weight = fishData.weight,
        catchTime = os.time()
    }
    
    logActivity("CATCH", string.format("Caught %s (%s) - Value: %d", 
        fishData.name, fishData.rarity, fishData.value or 0))
end

--// 5. AUTO BAIT OPTIMIZER
function FishingExploits:StartAutoBaitOptimizer()
    if self.Config.AutoBaitOptimizer then return end
    self.Config.AutoBaitOptimizer = true
    logActivity("BAIT", "Starting Auto Bait Optimizer")
    
    spawn(function()
        while self.Config.AutoBaitOptimizer do
            local currentZone = getCurrentZone()
            self:OptimizeBaitForZone(currentZone)
            wait(10) -- Check every 10 seconds
        end
    end)
end

function FishingExploits:StopAutoBaitOptimizer()
    self.Config.AutoBaitOptimizer = false
    logActivity("BAIT", "Stopping Auto Bait Optimizer")
end

function FishingExploits:OptimizeBaitForZone(zone)
    local zoneSettings = self.ZoneSettings[zone]
    if not zoneSettings then return end
    
    local optimalBait = zoneSettings.bestBait
    local currentBait = self:GetCurrentBait()
    
    if currentBait ~= optimalBait then
        self:ChangeToBait(optimalBait)
    end
end

function FishingExploits:GetCurrentBait()
    -- This would need to be implemented based on game's bait system
    local character = lp.Character
    if character then
        for _, item in pairs(character:GetChildren()) do
            if item:IsA("Tool") and string.find(item.Name:lower(), "bait") then
                return item.Name
            end
        end
    end
    return nil
end

function FishingExploits:ChangeToBait(baitName)
    local bait = lp.Backpack:FindFirstChild(baitName)
    if not bait then
        logActivity("BAIT", "Bait not found: " .. baitName)
        return false
    end
    
    if self.RemoteEvents.Equipment.Bait then
        safeFireRemote(self.RemoteEvents.Equipment.Bait, baitName)
        logActivity("BAIT", "Changed to bait: " .. baitName)
        return true
    end
    
    return false
end

--// ADVANCED FEATURES
function FishingExploits:AISelectOptimalRod(zone)
    local availableRods = self:GetAvailableRods()
    local bestRod = nil
    local bestRating = 0
    
    for _, rod in pairs(availableRods) do
        local rating = getRodRating(rod.Name)
        
        -- Zone bonus
        local zoneSettings = self.ZoneSettings[zone]
        if zoneSettings and rod.Name == zoneSettings.optimalRod then
            rating = rating + 20
        end
        
        if rating > bestRating then
            bestRating = rating
            bestRod = rod
        end
    end
    
    if bestRod then
        self:ChangeToRod(bestRod.Name)
    end
end

function FishingExploits:UpdateAIKnowledge(decision)
    -- Simple learning: track success rates of decisions
    local success = self:EvaluateDecisionSuccess(decision)
    
    if not self.Data.AIKnowledge then
        self.Data.AIKnowledge = {}
    end
    
    local key = decision.action .. "_" .. (decision.zone or getCurrentZone())
    
    if not self.Data.AIKnowledge[key] then
        self.Data.AIKnowledge[key] = {
            attempts = 0,
            successes = 0,
            successRate = 0
        }
    end
    
    local knowledge = self.Data.AIKnowledge[key]
    knowledge.attempts = knowledge.attempts + 1
    
    if success then
        knowledge.successes = knowledge.successes + 1
    end
    
    knowledge.successRate = knowledge.successes / knowledge.attempts
end

function FishingExploits:EvaluateDecisionSuccess(decision)
    -- Simple success evaluation
    if decision.action == "cast" then
        local rod = getEquippedRod()
        return rod and rod.values.lure.Value > 0
    elseif decision.action == "reel" then
        return #self.Data.CatchHistory > 0
    end
    
    return true -- Default to success for other actions
end

--// CONTROL FUNCTIONS
function FishingExploits:StartAllSystems()
    self:StartPerfectFishAI()
    self:StartMultiRodCasting()
    self:StartAutoRodChanger()
    self:StartFishRarityDetector()
    self:StartAutoBaitOptimizer()
    logActivity("SYSTEM", "All fishing exploit systems started")
end

function FishingExploits:StopAllSystems()
    self:StopPerfectFishAI()
    self:StopMultiRodCasting()
    self:StopAutoRodChanger()
    self:StopFishRarityDetector()
    self:StopAutoBaitOptimizer()
    logActivity("SYSTEM", "All fishing exploit systems stopped")
end

function FishingExploits:GetStatus()
    return {
        PerfectFishAI = self.Config.PerfectFishAI,
        MultiRodCasting = self.Config.MultiRodCasting,
        AutoRodChanger = self.Config.AutoRodChanger,
        FishRarityDetector = self.Config.FishRarityDetector,
        AutoBaitOptimizer = self.Config.AutoBaitOptimizer,
        CurrentZone = getCurrentZone(),
        CatchHistory = #self.Data.CatchHistory,
        AIDecisions = #self.Data.AIDecisions,
        RarityThreshold = self.Config.RarityThreshold
    }
end

--// EMERGENCY FUNCTIONS
function FishingExploits:EmergencyStop()
    self:StopAllSystems()
    logActivity("EMERGENCY", "Emergency stop activated - all fishing systems halted")
end

--// INITIALIZE
function FishingExploits:Initialize()
    logActivity("INIT", "Advanced Fishing Automation Exploits Module Initialized")
    logActivity("INIT", "Available Features: Perfect Fish AI, Multi-Rod Casting, Auto Rod Changer, Fish Rarity Detector, Auto Bait Optimizer")
end

return FishingExploits
