--// Environment & World Exploits Module
--// Based on Remote Events Analysis from fdump.txt
--// Created: September 3, 2025

local Players = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local Workspace = cloneref(game:GetService('Workspace'))
local RunService = cloneref(game:GetService('RunService'))
local Lighting = cloneref(game:GetService('Lighting'))
local TweenService = cloneref(game:GetService('TweenService'))

local lp = Players.LocalPlayer
local EnvironmentExploits = {}

--// Remote Events Storage (Based on fdump.txt)
EnvironmentExploits.RemoteEvents = {
    -- Zone System
    Zone = {
        Enter = ReplicatedStorage.packages.Net.RE.Zone.Enter,
        Exit = ReplicatedStorage.packages.Net.RE.Zone.Exit,
        RequestData = ReplicatedStorage.packages.Net.RF.Zone.RequestData,
        GetZoneData = ReplicatedStorage.packages.Net.RF.Zone.GetZoneData
    },
    
    -- Daylight Cycle & Weather
    DaylightCycle = {
        SetTime = ReplicatedStorage.packages.Net.RE.DaylightCycle.SetTime,
        RequestSync = ReplicatedStorage.packages.Net.RE.DaylightCycle.RequestSync,
        UpdateWeather = ReplicatedStorage.packages.Net.RE.DaylightCycle.UpdateWeather
    },
    
    -- Water System
    Water = {
        SetLevel = ReplicatedStorage.packages.Net.RE.Water.SetLevel,
        ToggleEffect = ReplicatedStorage.packages.Net.RE.Water.ToggleEffect,
        UpdateDepth = ReplicatedStorage.packages.Net.RE.Water.UpdateDepth
    },
    
    -- Environment Effects
    Environment = {
        ChangeEffect = ReplicatedStorage.packages.Net.RE.Environment.ChangeEffect,
        ToggleParticles = ReplicatedStorage.packages.Net.RE.Environment.ToggleParticles,
        SetAmbient = ReplicatedStorage.packages.Net.RE.Environment.SetAmbient
    },
    
    -- Camera System
    Camera = {
        SetFOV = ReplicatedStorage.packages.Net.RE.Camera.SetFOV,
        ToggleMode = ReplicatedStorage.packages.Net.RE.Camera.ToggleMode,
        UpdateSettings = ReplicatedStorage.packages.Net.RE.Camera.UpdateSettings
    },
    
    -- World State
    World = {
        LoadArea = ReplicatedStorage.packages.Net.RE.World.LoadArea,
        UnloadArea = ReplicatedStorage.packages.Net.RE.World.UnloadArea,
        UpdateState = ReplicatedStorage.packages.Net.RE.World.UpdateState
    },
    
    -- Special Areas
    SpecialAreas = {
        Depths = ReplicatedStorage.packages.Net.RE.DepthsEntrance,
        AncientIsle = ReplicatedStorage.packages.Net.RE.AncientIsle.Enter,
        MushroveSwamp = ReplicatedStorage.packages.Net.RE.MushroveSwamp.Enter,
        NorthernSummit = ReplicatedStorage.packages.Net.RE.NorthernSummit.Enter
    }
}

--// Data Storage
EnvironmentExploits.Data = {
    ZoneHistory = {},
    WeatherHistory = {},
    WaterLevels = {},
    CameraSettings = {},
    EnvironmentStates = {},
    AccessibleZones = {},
    BypassedAreas = {}
}

--// Configuration
EnvironmentExploits.Config = {
    ZoneBypasser = false,
    WeatherController = false,
    WaterLevelManipulator = false,
    CameraFOVExploiter = false,
    NoclipThroughWater = false,
    BypassCooldown = 0.1,
    WeatherChangeDelay = 1,
    WaterUpdateRate = 0.5,
    FOVChangeRate = 0.2,
    NoclipSpeed = 16,
    LogActivity = true
}

--// Zone Data
EnvironmentExploits.ZoneData = {
    PublicZones = {
        "Moosewood", "Roslit Bay", "Ancient Isle", "Mushgrove Swamp",
        "Terrapin Island", "Snowcap Island", "Forsaken Shores"
    },
    
    RestrictedZones = {
        "Depths", "Northern Summit", "Staff Area", "Admin Zone",
        "Testing Area", "Private Island", "VIP Zone"
    },
    
    SpecialZones = {
        "Vertigo", "Wilson", "Keepers Altar", "Brine Pool",
        "Statue Of Sovereignty", "Grand Reef", "Hadal Blacksite"
    }
}

--// Weather Patterns
EnvironmentExploits.WeatherPatterns = {
    Clear = { Lighting = {150, 150, 150}, Particles = false },
    Rain = { Lighting = {100, 100, 120}, Particles = true },
    Storm = { Lighting = {50, 50, 80}, Particles = true },
    Fog = { Lighting = {80, 80, 80}, Particles = true },
    Snow = { Lighting = {180, 180, 200}, Particles = true },
    Aurora = { Lighting = {120, 150, 180}, Particles = true }
}

--// Helper Functions
local function safeFireRemote(remote, ...)
    local success, result = pcall(function()
        return remote:FireServer(...)
    end)
    if not success then
        warn("Failed to fire remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function safeInvokeRemote(remote, ...)
    local success, result = pcall(function()
        return remote:InvokeServer(...)
    end)
    if not success then
        warn("Failed to invoke remote:", remote.Name, "Error:", result)
    end
    return success, result
end

local function logActivity(activity, details)
    if not EnvironmentExploits.Config.LogActivity then return end
    local timestamp = os.date("%H:%M:%S")
    print(string.format("[%s] ENV: %s - %s", timestamp, activity, details or ""))
end

--// 1. ZONE BYPASSER
function EnvironmentExploits:StartZoneBypasser()
    if self.Config.ZoneBypasser then return end
    self.Config.ZoneBypasser = true
    logActivity("ZONE", "Starting Zone Bypasser")
    
    spawn(function()
        while self.Config.ZoneBypasser do
            self:BypassZoneRestrictions()
            self:AccessRestrictedZones()
            self:UnlockSpecialAreas()
            wait(self.Config.BypassCooldown)
        end
    end)
end

function EnvironmentExploits:StopZoneBypasser()
    self.Config.ZoneBypasser = false
    logActivity("ZONE", "Stopping Zone Bypasser")
end

function EnvironmentExploits:BypassZoneRestrictions()
    local character = lp.Character
    if not character then return end
    
    -- Method 1: Force zone entry through remote events
    self:ForceZoneEntry()
    
    -- Method 2: Modify player zone attributes
    self:ModifyZoneAttributes()
    
    -- Method 3: Bypass zone detection
    self:BypassZoneDetection()
end

function EnvironmentExploits:ForceZoneEntry()
    -- Force entry to all zones
    for _, zone in pairs(self.ZoneData.RestrictedZones) do
        if self.RemoteEvents.Zone.Enter then
            safeFireRemote(self.RemoteEvents.Zone.Enter, zone, true) -- Force entry
            logActivity("BYPASS", "Forced entry to " .. zone)
        end
    end
    
    -- Access special areas
    for _, zone in pairs(self.ZoneData.SpecialZones) do
        if self.RemoteEvents.Zone.Enter then
            safeFireRemote(self.RemoteEvents.Zone.Enter, zone, true)
        end
    end
end

function EnvironmentExploits:ModifyZoneAttributes()
    local character = lp.Character
    if character then
        -- Set zone access permissions
        character:SetAttribute("HasZoneAccess", true)
        character:SetAttribute("VIPAccess", true)
        character:SetAttribute("StaffAccess", true)
        character:SetAttribute("AdminAccess", true)
        
        -- Set zone unlock status
        for _, zone in pairs(self.ZoneData.RestrictedZones) do
            character:SetAttribute("Unlocked_" .. zone, true)
            character:SetAttribute("CanEnter_" .. zone, true)
        end
    end
end

function EnvironmentExploits:BypassZoneDetection()
    -- Hook zone detection functions
    local character = lp.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        -- Temporarily set position attributes to bypass detection
        character.HumanoidRootPart:SetAttribute("ZoneBypass", true)
        character.HumanoidRootPart:SetAttribute("NoZoneCheck", true)
    end
end

function EnvironmentExploits:AccessRestrictedZones()
    -- Teleport to restricted zones
    local restrictedZonePositions = {
        ["Depths"] = CFrame.new(491, -706, 1230),
        ["Northern Summit"] = CFrame.new(19608, 131, 5222),
        ["Staff Area"] = CFrame.new(0, 500, 0),
        ["Admin Zone"] = CFrame.new(10000, 1000, 10000),
        ["VIP Zone"] = CFrame.new(-5000, 200, -5000)
    }
    
    local character = lp.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        for zoneName, position in pairs(restrictedZonePositions) do
            if math.random(1, 5) == 1 then -- Random access to avoid detection
                character.HumanoidRootPart.CFrame = position
                logActivity("ACCESS", "Accessed restricted zone: " .. zoneName)
                wait(1)
            end
        end
    end
end

function EnvironmentExploits:UnlockSpecialAreas()
    -- Unlock special fishing areas
    for areaName, remote in pairs(self.RemoteEvents.SpecialAreas) do
        if remote then
            safeFireRemote(remote, true) -- Force unlock
            logActivity("UNLOCK", "Unlocked special area: " .. areaName)
        end
    end
end

function EnvironmentExploits:TeleportToZone(zoneName)
    local zonePositions = {
        ["Moosewood"] = CFrame.new(379, 134, 233),
        ["Roslit Bay"] = CFrame.new(-1472, 132, 707),
        ["Ancient Isle"] = CFrame.new(6056, 195, 276),
        ["Depths"] = CFrame.new(491, -706, 1230),
        ["Northern Summit"] = CFrame.new(19608, 131, 5222),
        ["Mushgrove Swamp"] = CFrame.new(2525, 132, -721),
        ["Terrapin Island"] = CFrame.new(-142, 142, 1836),
        ["Snowcap Island"] = CFrame.new(2648, 139, 2522),
        ["Forsaken Shores"] = CFrame.new(-2917, 135, 1570)
    }
    
    local position = zonePositions[zoneName]
    if position and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        lp.Character.HumanoidRootPart.CFrame = position
        
        -- Force zone entry
        if self.RemoteEvents.Zone.Enter then
            safeFireRemote(self.RemoteEvents.Zone.Enter, zoneName)
        end
        
        logActivity("TELEPORT", "Teleported to zone: " .. zoneName)
        return true
    end
    
    return false
end

--// 2. WEATHER CONTROLLER
function EnvironmentExploits:StartWeatherController()
    if self.Config.WeatherController then return end
    self.Config.WeatherController = true
    logActivity("WEATHER", "Starting Weather Controller")
    
    spawn(function()
        while self.Config.WeatherController do
            self:ControlWeatherSystems()
            wait(self.Config.WeatherChangeDelay)
        end
    end)
end

function EnvironmentExploits:StopWeatherController()
    self.Config.WeatherController = false
    logActivity("WEATHER", "Stopping Weather Controller")
end

function EnvironmentExploits:ControlWeatherSystems()
    -- Cycle through weather patterns
    for weatherType, settings in pairs(self.WeatherPatterns) do
        self:ApplyWeatherPattern(weatherType, settings)
        wait(0.5)
    end
end

function EnvironmentExploits:ApplyWeatherPattern(weatherType, settings)
    -- Method 1: Use daylight cycle remote
    if self.RemoteEvents.DaylightCycle.UpdateWeather then
        safeFireRemote(self.RemoteEvents.DaylightCycle.UpdateWeather, weatherType, settings)
    end
    
    -- Method 2: Direct lighting manipulation
    self:SetLightingProperties(settings.Lighting)
    
    -- Method 3: Environment effects
    self:SetEnvironmentEffects(weatherType, settings.Particles)
    
    logActivity("WEATHER", "Applied weather pattern: " .. weatherType)
end

function EnvironmentExploits:SetLightingProperties(lightingValues)
    if #lightingValues >= 3 then
        Lighting.Brightness = lightingValues[1] / 100
        Lighting.ColorShift_Bottom = Color3.fromRGB(lightingValues[1], lightingValues[2], lightingValues[3])
        Lighting.ColorShift_Top = Color3.fromRGB(lightingValues[1], lightingValues[2], lightingValues[3])
    end
end

function EnvironmentExploits:SetEnvironmentEffects(weatherType, hasParticles)
    if self.RemoteEvents.Environment.ChangeEffect then
        safeFireRemote(self.RemoteEvents.Environment.ChangeEffect, weatherType)
    end
    
    if self.RemoteEvents.Environment.ToggleParticles then
        safeFireRemote(self.RemoteEvents.Environment.ToggleParticles, hasParticles)
    end
end

function EnvironmentExploits:SetSpecificWeather(weatherType)
    local pattern = self.WeatherPatterns[weatherType]
    if pattern then
        self:ApplyWeatherPattern(weatherType, pattern)
        logActivity("WEATHER", "Set specific weather: " .. weatherType)
        return true
    end
    return false
end

function EnvironmentExploits:SetTimeOfDay(hour)
    -- Set specific time (0-24)
    hour = math.clamp(hour, 0, 24)
    
    if self.RemoteEvents.DaylightCycle.SetTime then
        safeFireRemote(self.RemoteEvents.DaylightCycle.SetTime, hour)
    end
    
    -- Direct lighting manipulation
    Lighting.TimeOfDay = string.format("%02d:00:00", hour)
    
    logActivity("TIME", "Set time of day to: " .. hour .. ":00")
end

function EnvironmentExploits:CreateStorm()
    -- Create dramatic storm effect
    self:SetSpecificWeather("Storm")
    self:SetTimeOfDay(18) -- Evening storm
    
    -- Add lightning effects
    spawn(function()
        for i = 1, 10 do
            Lighting.Brightness = 2
            wait(0.1)
            Lighting.Brightness = 0.5
            wait(0.5)
        end
    end)
    
    logActivity("STORM", "Created storm effect")
end

--// 3. WATER LEVEL MANIPULATOR
function EnvironmentExploits:StartWaterLevelManipulator()
    if self.Config.WaterLevelManipulator then return end
    self.Config.WaterLevelManipulator = true
    logActivity("WATER", "Starting Water Level Manipulator")
    
    spawn(function()
        while self.Config.WaterLevelManipulator do
            self:ManipulateWaterLevels()
            wait(self.Config.WaterUpdateRate)
        end
    end)
end

function EnvironmentExploits:StopWaterLevelManipulator()
    self.Config.WaterLevelManipulator = false
    logActivity("WATER", "Stopping Water Level Manipulator")
end

function EnvironmentExploits:ManipulateWaterLevels()
    -- Cycle through different water levels
    local waterLevels = {-1000, -500, 0, 100, 200, 500, 1000}
    
    for _, level in pairs(waterLevels) do
        self:SetWaterLevel(level)
        wait(0.2)
    end
end

function EnvironmentExploits:SetWaterLevel(level)
    -- Method 1: Use water remote events
    if self.RemoteEvents.Water.SetLevel then
        safeFireRemote(self.RemoteEvents.Water.SetLevel, level)
    end
    
    -- Method 2: Direct water part manipulation
    self:ModifyWaterParts(level)
    
    -- Method 3: Update depth system
    if self.RemoteEvents.Water.UpdateDepth then
        safeFireRemote(self.RemoteEvents.Water.UpdateDepth, level)
    end
    
    table.insert(self.Data.WaterLevels, {level = level, timestamp = tick()})
    logActivity("WATER", "Set water level to: " .. level)
end

function EnvironmentExploits:ModifyWaterParts(level)
    -- Find and modify water parts
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Part") and (obj.Name:lower():find("water") or obj.Material == Enum.Material.Water) then
            obj.Position = Vector3.new(obj.Position.X, level, obj.Position.Z)
        end
    end
end

function EnvironmentExploits:DrainWater()
    self:SetWaterLevel(-2000)
    logActivity("WATER", "Drained all water")
end

function EnvironmentExploits:FloodArea()
    self:SetWaterLevel(1000)
    logActivity("WATER", "Flooded area")
end

function EnvironmentExploits:ToggleWaterEffects()
    if self.RemoteEvents.Water.ToggleEffect then
        safeFireRemote(self.RemoteEvents.Water.ToggleEffect, not self.Config.WaterEffectsEnabled)
        self.Config.WaterEffectsEnabled = not self.Config.WaterEffectsEnabled
        logActivity("WATER", "Toggled water effects: " .. tostring(self.Config.WaterEffectsEnabled))
    end
end

--// 4. CAMERA FOV EXPLOITER
function EnvironmentExploits:StartCameraFOVExploiter()
    if self.Config.CameraFOVExploiter then return end
    self.Config.CameraFOVExploiter = true
    logActivity("CAMERA", "Starting Camera FOV Exploiter")
    
    spawn(function()
        while self.Config.CameraFOVExploiter do
            self:ExploitCameraFOV()
            wait(self.Config.FOVChangeRate)
        end
    end)
end

function EnvironmentExploits:StopCameraFOVExploiter()
    self.Config.CameraFOVExploiter = false
    logActivity("CAMERA", "Stopping Camera FOV Exploiter")
end

function EnvironmentExploits:ExploitCameraFOV()
    local camera = Workspace.CurrentCamera
    if not camera then return end
    
    -- Cycle through FOV values
    local fovValues = {30, 50, 70, 90, 110, 130, 150, 180}
    
    for _, fov in pairs(fovValues) do
        self:SetCameraFOV(fov)
        wait(0.1)
    end
end

function EnvironmentExploits:SetCameraFOV(fov)
    local camera = Workspace.CurrentCamera
    if camera then
        -- Method 1: Direct camera manipulation
        camera.FieldOfView = fov
        
        -- Method 2: Use camera remote events
        if self.RemoteEvents.Camera.SetFOV then
            safeFireRemote(self.RemoteEvents.Camera.SetFOV, fov)
        end
        
        -- Method 3: Store in settings
        if self.RemoteEvents.Camera.UpdateSettings then
            safeFireRemote(self.RemoteEvents.Camera.UpdateSettings, {FOV = fov})
        end
        
        table.insert(self.Data.CameraSettings, {fov = fov, timestamp = tick()})
        logActivity("FOV", "Set camera FOV to: " .. fov)
    end
end

function EnvironmentExploits:SetMaxFOV()
    self:SetCameraFOV(180)
    logActivity("FOV", "Set maximum FOV (180)")
end

function EnvironmentExploits:SetMinFOV()
    self:SetCameraFOV(1)
    logActivity("FOV", "Set minimum FOV (1)")
end

function EnvironmentExploits:SetZoomFOV()
    self:SetCameraFOV(10)
    logActivity("FOV", "Set zoom FOV (10)")
end

function EnvironmentExploits:SetWideFOV()
    self:SetCameraFOV(150)
    logActivity("FOV", "Set wide FOV (150)")
end

function EnvironmentExploits:ToggleCameraMode()
    if self.RemoteEvents.Camera.ToggleMode then
        safeFireRemote(self.RemoteEvents.Camera.ToggleMode)
        logActivity("CAMERA", "Toggled camera mode")
    end
end

--// 5. NOCLIP THROUGH WATER
function EnvironmentExploits:StartNoclipThroughWater()
    if self.Config.NoclipThroughWater then return end
    self.Config.NoclipThroughWater = true
    logActivity("NOCLIP", "Starting Noclip Through Water")
    
    self.NoclipConnection = RunService.Heartbeat:Connect(function()
        self:ProcessNoclipThroughWater()
    end)
end

function EnvironmentExploits:StopNoclipThroughWater()
    self.Config.NoclipThroughWater = false
    if self.NoclipConnection then
        self.NoclipConnection:Disconnect()
        self.NoclipConnection = nil
    end
    logActivity("NOCLIP", "Stopping Noclip Through Water")
end

function EnvironmentExploits:ProcessNoclipThroughWater()
    local character = lp.Character
    if not character then return end
    
    -- Method 1: Disable collision with water parts
    self:DisableWaterCollision(character)
    
    -- Method 2: Modify character collision properties
    self:ModifyCharacterCollision(character)
    
    -- Method 3: Enable water noclip mode
    self:EnableWaterNoclipMode(character)
end

function EnvironmentExploits:DisableWaterCollision(character)
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            for _, obj in pairs(Workspace:GetDescendants()) do
                if obj:IsA("Part") and (obj.Name:lower():find("water") or obj.Material == Enum.Material.Water) then
                    -- Create collision exemption
                    obj.CanCollide = false
                end
            end
        end
    end
end

function EnvironmentExploits:ModifyCharacterCollision(character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        -- Set attributes for water noclip
        humanoidRootPart:SetAttribute("WaterNoclip", true)
        humanoidRootPart:SetAttribute("IgnoreWater", true)
    end
    
    -- Modify all character parts
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            part:SetAttribute("NoWaterCollision", true)
        end
    end
end

function EnvironmentExploits:EnableWaterNoclipMode(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        -- Set swimming state to prevent water physics
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    end
end

function EnvironmentExploits:SwimThroughTerrain()
    local character = lp.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = character.HumanoidRootPart
        
        -- Enable terrain noclip
        humanoidRootPart:SetAttribute("TerrainNoclip", true)
        
        -- Disable terrain collision
        for _, region in pairs(Workspace:GetDescendants()) do
            if region:IsA("Terrain") then
                region.CanCollide = false
            end
        end
        
        logActivity("NOCLIP", "Enabled swimming through terrain")
    end
end

function EnvironmentExploits:NoclipToDepths()
    local character = lp.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        -- Enable full noclip for depths access
        self:EnableFullNoclip()
        
        -- Teleport to depths while noclipping
        character.HumanoidRootPart.CFrame = CFrame.new(491, -706, 1230)
        
        logActivity("NOCLIP", "Noclipped to depths")
    end
end

function EnvironmentExploits:EnableFullNoclip()
    local character = lp.Character
    if character then
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
        
        logActivity("NOCLIP", "Enabled full noclip mode")
    end
end

function EnvironmentExploits:DisableFullNoclip()
    local character = lp.Character
    if character then
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = true
            end
        end
        
        logActivity("NOCLIP", "Disabled full noclip mode")
    end
end

--// UTILITY FUNCTIONS
function EnvironmentExploits:GetEnvironmentStatus()
    local status = {
        currentZone = self:GetCurrentZone(),
        accessibleZones = #self.Data.AccessibleZones,
        bypassedAreas = #self.Data.BypassedAreas,
        weatherChanges = #self.Data.WeatherHistory,
        waterLevelChanges = #self.Data.WaterLevels,
        cameraSettings = #self.Data.CameraSettings
    }
    
    return status
end

function EnvironmentExploits:GetCurrentZone()
    local character = lp.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local position = character.HumanoidRootPart.Position
        
        -- Determine zone based on position
        if position.Y < -500 then
            return "Depths"
        elseif position.Y > 1000 then
            return "Northern Summit"
        elseif position.X > 10000 then
            return "Special Area"
        else
            return "Surface Area"
        end
    end
    
    return "Unknown"
end

function EnvironmentExploits:PrintEnvironmentStatus()
    local status = self:GetEnvironmentStatus()
    
    print("\n🌍 ENVIRONMENT SYSTEM STATUS")
    print("═══════════════════════════")
    print("📍 Current Zone: " .. status.currentZone)
    print("🗺️ Accessible Zones: " .. status.accessibleZones)
    print("🔓 Bypassed Areas: " .. status.bypassedAreas)
    print("🌤️ Weather Changes: " .. status.weatherChanges)
    print("🌊 Water Level Changes: " .. status.waterLevelChanges)
    print("📷 Camera Settings: " .. status.cameraSettings)
    
    print("\n🔄 SYSTEM STATUS:")
    print("├─ Zone Bypasser: " .. (self.Config.ZoneBypasser and "🟢 ON" or "🔴 OFF"))
    print("├─ Weather Controller: " .. (self.Config.WeatherController and "🟢 ON" or "🔴 OFF"))
    print("├─ Water Level Manipulator: " .. (self.Config.WaterLevelManipulator and "🟢 ON" or "🔴 OFF"))
    print("├─ Camera FOV Exploiter: " .. (self.Config.CameraFOVExploiter and "🟢 ON" or "🔴 OFF"))
    print("└─ Noclip Through Water: " .. (self.Config.NoclipThroughWater and "🟢 ON" or "🔴 OFF"))
end

--// CONTROL FUNCTIONS
function EnvironmentExploits:StartAllSystems()
    self:StartZoneBypasser()
    self:StartWeatherController()
    self:StartWaterLevelManipulator()
    self:StartCameraFOVExploiter()
    self:StartNoclipThroughWater()
    logActivity("SYSTEM", "All environment exploit systems started")
end

function EnvironmentExploits:StopAllSystems()
    self:StopZoneBypasser()
    self:StopWeatherController()
    self:StopWaterLevelManipulator()
    self:StopCameraFOVExploiter()
    self:StopNoclipThroughWater()
    logActivity("SYSTEM", "All environment exploit systems stopped")
end

function EnvironmentExploits:GetStatus()
    return {
        ZoneBypasser = self.Config.ZoneBypasser,
        WeatherController = self.Config.WeatherController,
        WaterLevelManipulator = self.Config.WaterLevelManipulator,
        CameraFOVExploiter = self.Config.CameraFOVExploiter,
        NoclipThroughWater = self.Config.NoclipThroughWater,
        AccessibleZones = #self.Data.AccessibleZones,
        BypassedAreas = #self.Data.BypassedAreas,
        CurrentZone = self:GetCurrentZone()
    }
end

--// EMERGENCY FUNCTIONS
function EnvironmentExploits:EmergencyStop()
    self:StopAllSystems()
    logActivity("EMERGENCY", "Emergency stop activated - all environment systems halted")
end

function EnvironmentExploits:RestoreDefaults()
    -- Restore default environment settings
    self:SetTimeOfDay(12)
    self:SetSpecificWeather("Clear")
    self:SetWaterLevel(132)
    self:SetCameraFOV(70)
    self:DisableFullNoclip()
    
    logActivity("RESTORE", "Environment settings restored to defaults")
end

--// INITIALIZE
function EnvironmentExploits:Initialize()
    logActivity("INIT", "Environment & World Exploits Module Initialized")
    logActivity("INIT", "Available Features: Zone Bypasser, Weather Controller, Water Level Manipulator, Camera FOV Exploiter, Noclip Through Water")
end

return EnvironmentExploits
